#!/usr/bin/env zsh

# time debugging
if [ -z "$_STARTUP_DEBUG_TIME" ]; then
  _STARTUP_DEBUG_TIME=$(date +"%s%3N")
fi

ZSH_RC_PATH="${ZDOTDIR:-$HOME}/.zshrc"
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}

exists() { command -v "$1" &>/dev/null; }
setTitle() { printf '\033]0;%s\007' "$1"; }
isAndroid() { test "$(uname -o)" = Android; }
isRoot() { [ "$EUID" = 0 ] }

sourceIf() {
  [ $# != 1 ] && return 1
  [ -f "$1" ] && source "$1"
}

sourceOneOf() {
  for f in "$@"; do
    [ -r "$f" ] && { source "$f"; return 0; }
  done

  return 1
}

eval "$(lua "$DOTFILES/lib/z.lua" --init zsh enhanced once echo fzf)" \
  || printf >&2 "error: failed to load z.lua\n"

# Load some other libraries
sourceIf "$XDG_CONFIG_HOME/dots/env.sh"
sourceIf ~/storage/local/config/zshrc.personal

# general options
setopt interactivecomments # can use '#' for comments in interactive
setopt histignorespace # entries that start with a ' ' don't get to the history file
setopt PROMPT_SUBST # $(cmd) literals are run on $PS1/$PS2/$RPROMPT

# history config
HISTFILE="$XDG_CACHE_HOME/zhistory"
HISTSIZE=SAVEHIST=100000
setopt sharehistory
setopt extendedhistory
setopt nobanghist # i fuc king hate !!!!!!!
setopt HIST_IGNORE_ALL_DUPS

# color plugin config
autoload -U colors && colors

# "edit in editor" plugin config
autoload -z edit-command-line
zle -N edit-command-line

# completion plugin config
autoload -U compinit # completion support
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # include hidden files in autocomplete

# configure prompt
{
  precmd() {
    local cwdAbbreviated
    cwdAbbreviated=$(pwd | awk -v patt="^$HOME" '{ gsub(patt, "~"); print }')

    # set terminal title
    setTitle "$(whoami)@${HOST}:$cwdAbbreviated"
  }

  _ps1Symbol="%F{13}Î» "
  _ps1ExitCodeIndicator="%(?.. %F{4}exit:%F{10}%?)"
  _ps1JobCountIndicator="%(1j. %F{4}jobs:%F{10}%j.)"

  _ps1UserIndicator="%F{10}%n@%m "
  _ps1PathIndicator="%F{12}%~"
  _ps1MainBox="%F{3}[${_ps1PathIndicator}%F{3}]"

  if isAndroid; then
    _ps1Home="%F{13}... "
  else
    _ps1Home='%F{13}%n%F{4}@%F{13}%m '
  fi

  if [ "$SHELL_STACK" ]; then
    _quotedShellStack=$(printf "%q" "$SHELL_STACK")
    _ps1ShellStackIndicator=" %F{4}stack:%F{9}$_quotedShellStack"
  else
    _ps1ShellStackIndicator=""
  fi

  PS1="
${_ps1MainBox}${_ps1ExitCodeIndicator}${_ps1JobCountIndicator}${_ps1ShellStackIndicator}
$_ps1Symbol%b%F{5}"

  PS2="%F{13}| %{$reset_color%}"
  # ! isAndroid && RPROMPT='%F{11}${SHELL_STACK}'
  # ! isAndroid && RPROMPT='%F{11}$(git-branch)'
  # [ "${NNNLVL:-0}" -ge 1 ] && PS1="%B%F{3}(%F{5}n%F{3})%b $PS1"
}

# use vim keys in tab completion menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

zshrc_updateRightPrompt() {
  isAndroid && return

  RPS1="${${KEYMAP/vicmd/[:N]}/(main|viins)}"
  RPS2=$RPS1
  zle reset-prompt
}

zle-keymap-select() {
  # change cursor shape for different vi modes
  if [ "$KEYMAP" = vicmd ] || [ "$1" = "block" ]; then
    printf '\033[1 q'
  elif [ "$KEYMAP" = main ] || [ "$KEYMAP" = viins ] \
         || [ "$KEYMAP" = '' ] || [ "$1" = 'beam' ]; then
    printf '\033[5 q'
  fi
  zshrc_updateRightPrompt
}
zle -N zle-keymap-select

zle-line-init() {
  zle -K viins # initiate `vi insert` as keymap
  # zshrc_updateRightPrompt # XXX: uncommenting this line glitches output when zsh-autosuggestions is not loaded... why??
}
zle -N zle-line-init

fzhistoryGen() {
  { [ -n "$ZSH_NAME" ] && fc -l 1 || history 1; } \
    | sed -r 's/ *[0-9]*\*? *//' \
    | tac | fzagnostic \
    | sed -r 's \\ \\\\ g'
}

fzhistory() {
  local result=$(fzhistoryGen) || return 1
  print -z "$result"
}

fzSelectFileGen() {
  local item
  fd -tf | fzagnostic -m "$@" | while read item; do
    echo -n "${(q)item} "
  done
}

fzSelectFile() {
  LBUFFER="${LBUFFER}$(fzSelectFileGen)"
  local ret="$?"
  zle reset-prompt
  return "$ret"
}

bindkey -s '^R' '\eS fzhistory\n'
if [ "$FILEMAN" = "lf" ] && exists lf; then
  bindkey -s '^o' '\eS lfAndCd\n'
elif exists nnn; then
  bindkey -s '^o' '\eS nnnAndCd\n'
fi

bindkey -s '^P' '\e[C'
bindkey '\e[' edit-command-line

bindkey '^F' fzSelectFile
zle -N fzSelectFile

lfAndCd() {
  local tmp=$(mktemp)

  (cd "${1:-.}" && lf -last-dir-path="$tmp" "$@")

  if [ -f "$tmp" ]; then
    dir=$(cat "$tmp")
    rm -f "$tmp" >/dev/null
    [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
  fi

  return 0
}

nnnAndCd() {
  # block nesting of nnn in subshells
  if [ -n "$NNNLVL" ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    printf "%s\n" "nnn is already running"
    return 1
  fi

  export NNN_TMPFILE="$XDG_CONFIG_HOME/nnn/.lastd"
  nnn "$@"
  if [ -f "$NNN_TMPFILE" ]; then
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" >/dev/null
  fi

  return 0
}

findFileGen() {
  printf "%s (%s)\n" "@updir" ".."
  printf "%s (%s)\n" "@here " "$(pwd)"

  local args=()
  [ "$FINDFILE_SHOWHIDDEN" ] && args+=('-H')
  [ "$FINDFILE_DIRONLY" ] && args+=('-td')

  fd "${args[@]}"
}

findFile() {
  local prog choice choices show_hidden

  if [ "$1" = "-H" ]; then
    show_hidden=1
    shift
  fi

  [ $# = 0 ] && prog="${EDITOR:-vi}" || prog="$1"
  choice="$(FINDFILE_SHOWHIDDEN="$show_hidden" findFileGen | fzagnostic)" || return 1

  case "$choice" in
    "@updir"*) cd .. && findFile ;; # FIXME: annoying recursion
    "@here "*) ;;
    *)
      if [ -f "$choice" ]; then
        "$prog" "$choice"
      elif [ -d "$choice" ]; then
        # FIXME: annoying recursion
        cd "$choice" && findFile
      else
        printf >&2 "Don't know what to do with choice %s; returning" "$choice"
        exit 1
      fi
      ;;
  esac
}

dup-term-gui() {
  [ "$WAYLAND_DISPLAY" ] || [ "$DISPLAY" ] || exit 2
  "$TERMINAL" &>/dev/null & disown
}
dup-term-tmux() {
  [ "$TMUX" ] || exit 2
  tmux new-window -c "$PWD"
}
dup-term-auto() {
  if [ "$WAYLAND_DISPLAY" ] || [ "$DISPLAY" ]; then
    dup-term-gui
  elif [ "$TMUX" ]; then
    dup-term-tmux
  else
    exit 2
  fi
}

alias Dgui='dup-term-gui'
alias Dtmux='dup-term-tmux'
alias D='dup-term-auto'

cdNearFile() {
  [ $# = 1 ] || exit 1

  if [ -f "$1" ]; then
    cd "$(dirname "$1")"
  elif [ -d "$1" ]; then
    cd "$1"
  else
    printf >&2 "%s: invalid file\n" "$0"
  fi
}

pushShell() {
  if [ "$SHELL_STACK" ]; then
    SHELL_STACK="$SHELL_STACK.${1:-zsh}" zsh
  else
    SHELL_STACK="${1:-zsh}" zsh
  fi
}

reloadRc() { source "$ZSH_RC_PATH" }
alias rl='reloadRc'

# Blocked commands
_warnBlockedCmd() {
  printf >&2 "[Command Blocked: %s]\n" "$1"
  return 1
}
r() { _warnBlockedCmd "$0"; }

warpToZ() { z -I -t . "$@"; }

alias w='warpToZ'
alias f='findFile'
alias fo='findFile open'
alias fof='findFile openfork'
alias fcd='FINDFILE_DIRONLY=1 findFile cd-to-file'

## a crappy version of make that tries to find the file on parent directories
## if it's not on the current one.
make() {
  local dir

  if [ "$1" = "-f" ]; then
    # a *very* crappy workaround for using `make -f`.
    printf >&2 '[Warning] `-f` argument detected, running normal make\n'
    command make "$@"
  else
    dir="$PWD"
    while true; do
      if [ "$dir" = "/" ]; then
        printf >&2 '[Error] Could not find any valid Makefile.\n'
        return 1
      fi

      if [ -f "$dir/Makefile" ] || [ -f "$dir/makefile" ] || [ -f "$dir/GNUmakefile" ]; then
        (cd "$dir" && command make "$@")
        return $?
      fi

      dir=$(realpath -m "$dir/..")
    done
  fi
}

# fs tool aliases
alias ls='ls --color=auto'
alias l='ls -l'
alias la='ls -A'
alias du='du -shc'

e() { "$EDITOR" "$@"; }
se() { EDITOR=$(which "$EDITOR") sudoedit "$@"; } # yeah, workaround

alias g='git-check'
alias G='tig status'

alias p3='python3'
alias pip='python3 -m pip'

alias sy='dotsync'
alias of='openfork'

# sg() { dbus-launch --exit-with-session river-start; }
sg() { WM=qtile start-xserver; }

if exists nvim; then
  alias vi='nvim' vim='nvim'
elif exists vim; then
  alias vi='vim'
fi

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# A wrapper for the `info` command
info() {
  printf "\033[2 q"
  command info --vi-keys "$@"
}

sourceOneOf \
  "$ZSH_PLUGIN_PATH/zsh-autosuggestions/zsh-autosuggestions.zsh" \
  /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

_ept_canonicalize_str() {
  test $# = 1 || return 1

  case "$1" in
    pt|br) printf "pt-br" ;;
    jp) printf "japanese" ;;
    .|en|es|fr) printf "%s" "$1" ;;
    it) printf "italian" ;;
    lt) printf "latin" ;;
    _*) printf "%s" "${1#_}" ;;
    *)
      printf >&2 "Unknown language: %s\n" "$1"
      return 1
      ;;
  esac
}

epic-translate() {
  local src dest text

  if test $# -lt 3; then
    printf >&2 "Usage: %s <SOURCE-LANG> <TARGET-LANG> <TEXT...>\n" "$(basename "$0")"
    return 1
  fi

  src=$(_ept_canonicalize_str "$1") || return $?
  shift

  dest=$(_ept_canonicalize_str "$1") || return $?
  shift

  args=()
  [ "$src" != "." ] && args+=("-s" "$src")
  [ "$dest" != "." ] && args+=("-t" "$dest")

  trans "${args[@]}" "$*"
}

T() { epic-translate "$@" 2>&1 | less; }
Td() { epic-translate "$1" "$1" "$2" 2>&1 | less; }
P() { ps -eo pid,args | rg "$1"; }

.r() { . "$DOTFILES/config/dots/env.sh" && dotf.common.res-reload; }
.re() { .r && "$EDITOR"; }

# FIXME: I'm not exactly sure how to do this, specially because it messes up if I'm trying to use more than one X server.
if ! isAndroid; then
  gpg-connect-agent updatestartuptty /bye >/dev/null
fi

get-network-info() {
  printf >&2 "IPs:\n"
  ifconfig 2>/dev/null | grep inet | awk '{ print "  " $2 }'
  printf >&2 "User: %s\n" "$(whoami)"
  printf >&2 "Public IP: "
  curl ifconfig.me
  printf >&2 "\n"
}
alias N='get-network-info'

if [ "$_STARTUP_DEBUG_TIME" ] && [ -z "$_startup_time_shown" ]; then
  local current_time=$(date +"%s%3N")
  local time_elapsed=$(bc <<<"$current_time - $_STARTUP_DEBUG_TIME")
  printf >&2 "Time elapsed since startup: %s ms\n" "$time_elapsed"

  _startup_time_shown=1
fi

xamppctl() {
  case "$1" in
    start) sudo xampp start ;;
    stop) sudo xampp stop ;;
    restart) "$0" stop; "$0" start ;;
    *) printf >&2 "Invalid option: %s\n" "$1"; return 1 ;;
  esac
}

sdu() { du -shc "$@" | sort -h; }

ytdl() {
  exists yt-dlp && { yt-dlp "$@"; return "$?"; }
  exists youtube-dl && { youtube-dl "$@"; return "$?"; }
  return 1
}

findTodos() { rg '\b(TODO|FIXME|XXX)\b'; }

gS() { (git add . && git commit); git pull && git push; }
