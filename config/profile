#!/usr/bin/env bash

# Shell Profile
# This is run at login on a TTY.

exists() { command -v "$1" >/dev/null 2>/dev/null; }
loggedSource() {
  [ $# = 1 ] || return 1
  printf >&2 "Sourcing %s...\n" "$(basename "$1")"
  . "$1"
}
isTermux() {
  [ "$(uname -o)" = Android ] || [ -d /data/data/com.termux ]
}

# load environment variables, set up $PATH and load libraries
loggedSource ~/.config/dots/env.sh
loggedSource ~/.config/dots/path.sh

startjob() {
  local line

  printf >&2 'Starting job -> "%s"\n' "$1"

  "$2" 2>&1 | while read line; do
    printf >&2 "\033[2K\r@job[%s] :: %s\n" "$1" "$line"
  done &
}

_updateClock() {
  local output=$(sudo -n ntpd -gq 2>&1)

  if [ $# = 0 ]; then
    printf >&2 "Update finished!\n"
  else
    printf >&2 "Update failed - printing output..."
    printf >&2 "%s\n" "$output"
  fi
}

isTermux || tty-loadcolors

os=$(uname -o)
printf >&2 "Uname: %s\n" "$os"

if ! isTermux; then
  # update the date because clock problems
  exists ntpd && startjob "Clock Update" _updateClock

  # prepare GPG & SSH
  printf >&2 "*** Preparing GPG and SSH..."
  gpgconf --launch gpg-agent
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  printf >&2 "OK!\n"

  # set up dotcfg daemon and load config
  {
    printf >&2 "*** Setting up dotcfg..."
    _socket=$(mktemp /tmp/dotcfg.XXXXXX.sock)
    export DOTCFG_SOCKET="$_socket"
    dotcfg daemon >/dev/null 2>/dev/null & disown
    gen-res dotcfg | dotcfg stdin-send >/dev/null
  }

  # generate configs
  # too disk-intensive to do every time it boots up on Termux
  printf >&2 "*** Generating config (sysm)...\n"
  sysm

  # set up SSH keychaing
  # if [ -x /usr/bin/keychain ]; then
  #   eval "$(keychain --eval --ignore-missing ~/.ssh/id_rsa 2>/dev/null)"
  # fi
fi

