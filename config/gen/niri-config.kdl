spawn-at-startup "dotf.common.deskinit"

environment {
    DISPLAY ":0"

    _JAVA_AWT_WM_NONREPARENTING "1" // niri-specific fix for java apps
}
spawn-at-startup "xwayland-satellite"

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        // see xkeyboard-config(7)
        xkb {
            layout "br"
            variant "abnt2"
            model ""
            rules ""

            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }
        repeat-delay 250
        repeat-rate 45
    }

    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        accel-speed 0.2
        // accel-profile "flat"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="0%"
}

output "HDMI-A-1" {
    mode "1920x1080@74.973" // why so specific...
}

// declare the workspaces so they become persistent
//!! for i in $(seq 1 9); do printf 'workspace "%d" {}\n' "$i"; done

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 8

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    default-column-width { proportion 0.5; }

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    focus-ring {
        // off
        width 2
//!! printf 'inactive-color "%s"\n' "$base00"
//!! printf 'active-color "%s"\n' "$base03"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        off
        width 2
//!! printf 'inactive-color "%s"\n' "$base00"
//!! printf 'active-color "%s"\n' "$base03"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Basically outer gaps.
    // Left and right struts will cause the next window to the side to always be visible.
    struts {
        left 0
        right 0
        top 0
        bottom 0
    }
}

// Ask the clients to omit their client-side decorations if possible.
prefer-no-csd

screenshot-path null // I don't use niri screenshots :)

animations {
    slowdown 0.8

    workspace-switch { off; }
}

window-rule {
    match app-id=r#"^float$"#
    open-floating true

//!! _w=1250 _h=750
//!! if [ "$(hostname)" = core ]; then _w=925; _h=575; fi
//!! printf "default-column-width { fixed %d; }\n" "$_w"
//!! printf "default-window-height { fixed %d; }\n" "$_h"
}

window-rule {
    match app-id=r#"^float-manual-size$"#
    open-floating true
}

// spawn (satty) screenshots floating on last workspace
window-rule {
    match app-id=r#"satty"#
    open-focused false
    open-floating true
    open-on-workspace "9"
}

window-rule {
    match app-id=r#"(firefox|LibreWolf)$"# title="^Picture-in-Picture$"
    open-floating true
}

window-rule {
    match app-id=r#"^Xdg-desktop-portal-gtk$"#
    open-floating true
}

// rounded corners
window-rule {
    geometry-corner-radius 10
    clip-to-geometry true
}

// make steam notifications not have a stroke
//
// source (mostly): https://github.com/YaLTeR/niri/wiki/Application-Issues
window-rule {
    match app-id="steam" title=r#"^notificationtoasts_\d+_desktop$"#
    default-floating-position x=0 y=0 relative-to="top-right"
    open-focused false
    geometry-corner-radius 0
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/ would be the same as Mod-?
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Q { close-window; }

    Mod+J { focus-column-right; }
    Mod+K { focus-column-left; }
    Mod+H { focus-window-up; }
    Mod+L { focus-window-down; }

    Mod+Shift+J { move-column-right; }
    Mod+Shift+K { move-column-left; }
    Mod+Shift+H { move-window-up; }
    Mod+Shift+L { move-window-down; }

    Mod+Ctrl+J { focus-monitor-right; }
    Mod+Ctrl+K { focus-monitor-left; }
    Mod+Ctrl+H { focus-monitor-up; }
    Mod+Ctrl+L { focus-monitor-down; }

    Mod+Shift+Ctrl+H { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L { move-column-to-monitor-right; }

    Mod+WheelScrollDown cooldown-ms=100 { focus-column-right; }
    Mod+WheelScrollUp cooldown-ms=100 { focus-column-left; }
    Mod+Shift+WheelScrollDown cooldown-ms=100 { move-column-right; }
    Mod+Shift+WheelScrollUp cooldown-ms=100 { move-column-left; }

    // Keep in mind that niri is a dynamic workspace system, so these commands
    // are kind of "best effort". Trying to refer to a workspace index bigger
    // than the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on will
    // all refer to the 3rd workspace.
//!! for i in $(seq 1 9); do printf "Mod+%d { focus-workspace %d; }\n" "$i" "$i"; done
//!! for i in $(seq 1 9); do printf "Mod+Shift+%d { move-window-to-workspace %d focus=false; }\n" "$i" "$i"; done

    Mod+G { consume-window-into-column; }
    Mod+Shift+G { expel-window-from-column; }

    Mod+Tab { maximize-column; }
    Mod+Ctrl+Tab { center-column; }

    Mod+A { toggle-overview; }

    Mod+BracketLeft { focus-workspace-up; }
    Mod+BracketRight { focus-workspace-down; }
    Mod+Shift+BracketLeft { move-window-to-workspace-up; }
    Mod+Shift+BracketRight { move-window-to-workspace-down; }

    // Toggle tabbed column display mode.
    // Windows in this column will appear as vertical tabs,
    // rather than stacked on top of each other.
    Mod+Shift+Tab { toggle-column-tabbed-display; }

    // Mod+Shift+F { toggle-windowed-fullscreen; }
    Mod+Shift+F { fullscreen-window; }

    // Size adjustments:
    // - set in (scaled) pixels: "1000"
    // - adjust in (scaled) pixels: "-5" or "+5"
    // - set in percentage of screen: "25%"
    // - adjust in percentage of screen: "-10%" or "+10%"
    Mod+Alt+L { set-column-width "+12.5%"; }
    Mod+Alt+H { set-column-width "-12.5%"; }
    Mod+Alt+K { set-window-height "-10%"; }
    Mod+Alt+J { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+Shift+Space { toggle-window-floating; }
    Mod+F { switch-focus-between-floating-and-tiling; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    // Print { screenshot; }
    // Ctrl+Print { screenshot-screen; }
    // Alt+Print { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    Ctrl+Super+Alt+E { quit; }

//!! KEYMAP_TARGET=niri dotf.gen.keymap
}

hotkey-overlay {
    skip-at-startup
}

gestures {
    hot-corners { off; }
}
