#!/usr/bin/env janet

(use tomlin) # TODO: stop using this
(use dotf-path)
(use dotf-utils)

(defn readline-agnostic
  ```
  Invokes readline-agnostic with the provided arguments.

  On success, returns the input as a string.

  On failure/cancellation, returns nil.
  ```
  [&named prompt-msg]

  (def prompt-arg (if (nil? prompt-msg) [] ["-p" prompt-msg]))

  (def args ["readline-agnostic" ;prompt-arg])
  (def [stdout-r stdout-w] (os/pipe))
  (def code (os/execute args :p {:out stdout-w}))
  (when (= code 0)
    (-> stdout-r (:read math/int32-max))))

(def HOME (assert (os/getenv "HOME") "HOME env var unset"))
(def SHELL (os/getenv "SHELL" "/bin/sh"))
(def EDITOR (os/getenv "EDITOR" "vi"))

(def XDG-CACHE-HOME (or (os/getenv "XDG_CACHE_HOME")
                        (string HOME "/.cache")))
(def FZRUN-PACKAGES-FOLDER (os/getenv "FZRUN_PACKAGES_FOLDER"))
(def FZRUN-RECENT-CMDS (or (os/getenv "FZRUN_RECENT_CMDS")
                           (string XDG-CACHE-HOME "/fzrun-recent-cmds")))

(def DISPLAY (os/getenv "DISPLAY"))
(def WAYLAND-DISPLAY (os/getenv "WAYLAND_DISPLAY"))
(def is-graphical (-> DISPLAY (or WAYLAND-DISPLAY) (truthy?)))

(defn add-line-to-file [path line]
  (def f (file/open path :an))
  (:write f line)
  (:write f "\n")
  (:close f))

(defn log [msg]
  (os/execute ["notify-send" "--" (string msg)] :px))

(defn run-shell [cmd add-to-recent]
  (when add-to-recent
    (add-line-to-file FZRUN-RECENT-CMDS cmd))

  # (def isatty (= 0 (os/execute [SHELL "-c" "[ -t 2 ]"] :p)))
  (def isatty true)
  (def args
    (if isatty
      [SHELL "-c" cmd]
      ["tmux-bg-run" cmd]))
  (os/exit (os/execute args :p)))

(defn cmd-menu [add-to-recent]
  (match (readline-agnostic :prompt "Type the desired command: ")
    nil (os/exit 1)
    out (run-shell (string out) add-to-recent)))

(defn bin-menu [add-to-recent]
  (def [pipe-r pipe-w] (os/pipe))
  (ev/spawn
    (os/execute ["gen-pathbin"] :px {:out pipe-w})) # TODO: error handling
  (def bins (->> (:read pipe-r math/int32-max)
                 (string/split "\n")))
  (match (try-brief (fzagnostic bins :prompt "Binary:"))
    nil (os/exit 1)
    [n _] (run-shell (in bins n) add-to-recent)))

(defn edit-recent []
  (os/exit (os/execute [EDITOR FZRUN-RECENT-CMDS] :p)))

(defn file-exists? [path]
  (-> path (os/stat :mode) (truthy?)))

(defn package-menu []
  (def entries @[])
  (each pkg (os/dir FZRUN-PACKAGES-FOLDER)
    (def pkg-f (string FZRUN-PACKAGES-FOLDER "/" pkg))
    (def possible-names ["Pkg.toml" "App.toml" "Game.toml"])

    (when (path/is-dir? pkg-f)
      (as?->
        possible-names .x
        (map |(string pkg-f "/" $) .x)
        (find file-exists? .x)
        (file/open .x :rn)
        (:read .x :all)

        # TODO: start using either (parse-all) for janet-style files or just do a basic config format. I don't want to use a separate library just for this.
        (toml->janet .x)

        (if-let [entries-raw (in .x :entry)]
          (loop [er :in entries-raw]
            (set (er :config) (in .x :config {}))
            (set (er :exec-dir) (in .x :exec-dir pkg-f))
            (array/push entries er)
            ))
        )))

  (match (try-brief (fzagnostic
           (->> entries (map |($ :name)))
           :prompt "Package: "
           :starting-number 50))
    nil (os/exit 1)

    [n _]
    (let [entry (in entries n)
          config (in entry :config)
          env (in entry :env {})
          exec-dir (in entry :exec-dir)]
      (each [k v] (pairs env)
        (os/setenv (string k) v))
      (os/cd exec-dir)
      (-> entry (in :command) (run-shell false)))

    _
    (error "Unexpected"))
  )

(defn main [&]
  (def actions
    [
     ["Run a custom command (add-recent:yes)"
      (fn [] (cmd-menu true))]
     ["Run a custom command (add-recent:no)"
      (fn [] (cmd-menu false))]
     ["Run a binary from the binary list (add-recent:yes)"
      (fn [] (bin-menu true))]
     ["Run a binary from the binary list (add-recent:no)"
      (fn [] (bin-menu false))]

     ;(if FZRUN-PACKAGES-FOLDER
        [["Select from the packages directory (apps/games)"
          package-menu]]
        [])

     ["Edit the recent commands file"
      (fn [] (edit-recent))]

     ;(match (file/open FZRUN-RECENT-CMDS :r)
        nil []
        f (->> (:read f :all)
               (string/split "\n")
               (map |(string/trim $))
               (filter |(not (or (= (length $) 0)
                                 (string/has-prefix? "#" $))))
               (map |[(string "(recnt) " $)
                      (fn [] (run-shell $ false))])
               ))
     ])

  (match (try-brief (fzagnostic (map first actions) :prompt "Run: "))
    nil
    (os/exit 1)

    [n _]
    (if-let [act (get actions n)]
      (-> act (in 1) (apply))
      (die "out of range choice: %j" n))
    )
  )
