#!/usr/bin/env janet

(use tomlin)

(defn fzagnostic
  ```
  Invokes fzagnostic with the provided arguments.

  On success, returns a tuple [n, s] where n is the index of the choice and s is the text string.

  On failure/cancellation, returns nil.
  ```
  [choices &named prompt starting-number]

  (def [stdin-r stdin-w] (os/pipe))
  (def [stdout-r stdout-w] (os/pipe))

  (def starting-number (or starting-number 0))
  (def fmt (let [max-n-len (-> starting-number (+ (length choices)) (- 1) (string) (length))]
             (string "%0" max-n-len "d || %s\n")))

  # write choices to stdin (separate fiber)
  (ev/spawn
    (for i 0 (length choices)
      (def str (string/format fmt (+ i starting-number) (in choices i)))
      (:write stdin-w str))
    (:close stdin-w))

  (def arglist @["fzagnostic"])
  (unless (nil? prompt)
    (array/push arglist "-p")
    (array/push arglist prompt))

  (def code (os/execute arglist :p {:in stdin-r :out stdout-w}))
  (when (= code 0)
    (def choice-s (-> stdout-r (:read math/int32-max) (string/trim)))
    (def [num s] (string/split " " choice-s 0 2))
    [(-> num (scan-number) (assert (string/format "%j is not a number" num)) (- starting-number)) s]))

(defn readline-agnostic
  ```
  Invokes readline-agnostic with the provided arguments.

  On success, returns the input as a string.

  On failure/cancellation, returns nil.
  ```
  [&named prompt]

  (def args ["readline-agnostic" ;(if (nil? prompt) [] ["-p" prompt])])
  (def [stdout-r stdout-w] (os/pipe))
  (def code (os/execute args :p {:out stdout-w}))
  (when (= code 0)
    (-> stdout-r (:read math/int32-max))))

(def HOME (assert (os/getenv "HOME") "HOME env var unset"))
(def SHELL (os/getenv "SHELL" "/bin/sh"))
(def EDITOR (os/getenv "EDITOR" "vi"))

(def XDG-CACHE-HOME (or (os/getenv "XDG_CACHE_HOME")
                        (string HOME "/.cache")))
(def FZRUN-PACKAGES-FOLDER (os/getenv "FZRUN_PACKAGES_FOLDER"))
(def FZRUN-RECENT-CMDS (or (os/getenv "FZRUN_RECENT_CMDS")
                           (string XDG-CACHE-HOME "/fzrun-recent-cmds")))

(def DISPLAY (os/getenv "DISPLAY"))
(def WAYLAND-DISPLAY (os/getenv "WAYLAND_DISPLAY"))
(def is-graphical (-> DISPLAY (or WAYLAND-DISPLAY) (truthy?)))

(defn add-line-to-file [path line]
  (def f (file/open path :an))
  (:write f line)
  (:write f "\n")
  (:close f))

(defn log [msg]
  (os/execute ["notify-send" "--" (string msg)] :px))

(defn run-shell [cmd add-to-recent]
  (when add-to-recent
    (add-line-to-file FZRUN-RECENT-CMDS cmd))

  # (def isatty (= 0 (os/execute [SHELL "-c" "[ -t 2 ]"] :p)))
  (def isatty true)
  (def args (if isatty
             [SHELL "-c" cmd]
             ["tmux-bg-run" cmd]))
  (os/exit (os/execute args :p)))

(defn cmd-menu [add-to-recent]
  (match (readline-agnostic :prompt "Type the desired command: ")
    nil (os/exit 1)
    out (run-shell (string out) add-to-recent)))

(defn bin-menu [add-to-recent]
  (def [pipe-r pipe-w] (os/pipe))
  (ev/spawn
    (os/execute ["gen-pathbin"] :px {:out pipe-w})) # TODO: error handling
  (def bins (->> (:read pipe-r math/int32-max)
                 (string/split "\n")))
  (match (fzagnostic bins :prompt "Binary:")
    nil (os/exit 1)
    [n _] (run-shell (in bins n) add-to-recent)))

(defn edit-recent []
  (os/exit (os/execute [EDITOR FZRUN-RECENT-CMDS] :p)))

(defn package-menu []
  (def entries @[])
  (each pkg (os/dir FZRUN-PACKAGES-FOLDER)
    (def pkg-f (string FZRUN-PACKAGES-FOLDER "/" pkg))
    (when (= :directory (os/stat pkg-f :mode))
      (-?>> ["Pkg.toml" "App.toml" "Game.toml"]
           (map |(string pkg-f "/" $))
           (find |(-> $ (os/stat :mode) (truthy?)))
           (|(-?>
               (file/open $ :rn)
               (:read :all)
               (toml->janet) # TODO: start using either (parse-all) for janet-style files or just do a basic config format. i don't want to use a separate library just for this

               # TODO: move most of this into something that runs after the entry has been selected. It would make this faster I think
               (|(let [config (or (in $ :config) {})
                       exec-dir (or (in $ :exec-dir) pkg-f)]
                   (if-let [entries-raw (in $ :entry)]
                     (each e entries-raw
                       (put e :config config)
                       (put e :exec-dir exec-dir)
                       (array/push entries e))
                     ))))))))

  (match (fzagnostic (->> entries (map |($ :name)))
                     :prompt "Package: "
                     :starting-number 50)
    nil (os/exit 1)
    [n _] (let [entry (in entries n)
                config (in entry :config)
                env (in entry :env {})
                exec-dir (in entry :exec-dir)]
            (each [k v] (pairs env)
              (os/setenv (string k) v))
            (os/cd exec-dir)
            (-> entry (in :command) (run-shell false)))
    _ (error "Unexpected"))
  )

(defn main [&]
  (def actions
    [
     ["Run a custom command (add-recent:yes)"
      (fn [] (cmd-menu true))]
     ["Run a custom command (add-recent:no)"
      (fn [] (cmd-menu false))]
     ["Run a binary from the binary list (add-recent:yes)"
      (fn [] (bin-menu true))]
     ["Run a binary from the binary list (add-recent:no)"
      (fn [] (bin-menu false))]

     ;(if FZRUN-PACKAGES-FOLDER
        [["Select from the packages directory (apps/games)"
          package-menu]]
        [])

     ["Edit the recent commands file"
      (fn [] (edit-recent))]

     ;(match (file/open FZRUN-RECENT-CMDS :r)
        nil []
        f (->> (:read f :all)
               (string/split "\n")
               (map |(string/trim $))
               (filter |(not (or (= (length $) 0)
                                 (string/has-prefix? "#" $))))
               (map |[(string "(recnt) " $)
                      (fn [] (run-shell $ false))])
               ))
     ])

  (match (fzagnostic (map (fn [[a b]] a) actions) :prompt "Run: ")
    nil (os/exit 1)
    [n _] (-> actions (in n) (in 1) (apply))))
