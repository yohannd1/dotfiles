#!/usr/bin/env sh

set -e

WINEW_ARCH="${WINEW_ARCH:-32}" # default arch is 32 bits
WINEW_32_PREFIX="${WINEW_32_PREFIX:-$XDG_DATA_DIR/wine32}"
WINEW_64_PREFIX="${WINEW_64_PREFIX:-$XDG_DATA_DIR/wine64}"
XDG_DATA_DIR="${XDG_DATA_DIR:-$HOME/.local/share}"

progname=$(basename "$0")

exists() { command -v "$1" >/dev/null 2>/dev/null; }
is_x11() { [ "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ]; }

show_help() {
cat >&2 <<EOF
Usage:
  $progname open <PROGRAM> [ARGS...]
    Performs Unix->DOS path conversion (TODO: actually do this lol)
    TODO: does this work on absolute paths?
  $progname cmd
  $progname cfg
  $progname add-recent <BIN>
  $progname tricks <ARGS...>
  $progname server [ARGS...]
  $progname fwd [ARGS...]
  $progname desktop [ARGS...]
  $progname path [ARGS...]

Used environment variables:
  WINEW_ARCH := { 32 | 64 } (Default: 32)
  WINEW_32_PREFIX: path to the 32-bit wine prefix
  WINEW_64_PREFIX: path to the 64-bit wine prefix
EOF
  exit 2
}

has_line() {
  if [ $# != 1 ]; then
    printf >&2 "%s: invalid amount of arguments\n" "$progname"
    return 1
  fi

  while read -r line; do
    [ "$line" = "$1" ] && return 0
  done

  return 1
}

exec_wine() {
  exec wine "$@"
}

case "$WINEW_ARCH" in
  32) export WINEARCH="win32" WINEPREFIX="$WINEW_32_PREFIX" ;;
  64) export WINEARCH="win64" WINEPREFIX="$WINEW_64_PREFIX" ;;
  *)
    printf >&2 "Unknown arch: %s\n" "$WINEW_ARCH"
    show_help
    ;;
esac

[ $# = 0 ] && show_help

case "$1" in
  cmd)
    [ $# != 1 ] && show_help
    exec_wine cmd
    ;;

  cfg)
    [ $# != 1 ] && show_help
    exec winecfg
    ;;

  desktop)
    [ $# != 1 ] && show_help
    resolution=800x600
    if is_x11 && exists xrandr; then
      resolution=$(xrandr | awk '/\*/ { print $1 }') || resolution=800x600
    fi

    shift
    exec wine explorer /desktop="shell,$resolution" "$@"
    ;;

  fwd)
    shift
    exec_wine "$@"
    exit
    ;;

  open)
    [ $# -lt 2 ] && show_help
    shift
    program_unix="$1"
    if [ ! -e "$program_unix" ]; then
      printf >&2 "error: program not found: %s\n" "$program_unix"
      exit 1
    fi
    program_dos=$(winepath -w "$program_unix")
    shift
    exec_wine "$program_dos" "$@"
    ;;

  path)
    shift
    exec winepath "$@"
    ;;

  server)
    shift
    exec wineserver "$@"
    ;;

  tricks)
    shift
    exec winetricks "$@"
    ;;

  *)
    printf >&2 "error: unknown command %s\n" "$1"
    show_help
    ;;
esac
