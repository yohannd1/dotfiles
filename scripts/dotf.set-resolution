#!/usr/bin/env bash

progname=$(basename "$0")

set -e

showHelp() {
  printf >&2 "Usage: %s [--output <OUTPUT>] [--mode <MODE>] [--scale <SCALE>] [--rate <RATE>]\n" "$progname"
  exit 2
}

[ $# = 0 ] && showHelp

die() {
  printf >&2 "%s\n" "$*"
  exit 1
}

getArg() {
  if [ $# -lt 2 ]; then
    printf >&2 "Missing value for argument %s\n" "$1"
    exit 2
  fi
  printf "%s\n" "$2"
}

set_xrandr() {
  args=()

  if [ "$arg_output" ]; then
    args+=(--output "$arg_output")
  else
    output=$(xrandr --listactivemonitors | tail +2 | head -n1 | awk '{ print $4 }')
    args+=(--output "$output")
  fi

  [ "$arg_mode" ] && args+=(--mode "$arg_mode")
  [ "$arg_rate" ] && args+=(-r "$arg_rate")
  [ "$arg_scale" ] && die "Scale not yet supported on xrandr backend" || true

  xrandr "${args[@]}"
}

set_niri() {
  # FIXME: setting the frame rate doesn't seem to work well if you don't specify the exact value. it just silently passes without doing nothing.

  if [ -z "$arg_output" ]; then
    arg_output=$(niri msg --json outputs | jq -r '.[].name' | head -n1)
  fi

  if [ "$arg_mode" ] || [ "$arg_rate" ]; then
    if [ -z "$arg_mode" ]; then
      json=$(niri msg --json outputs)
      curModeIdx=$(printf "%s" "$json" | jq -r '.[].current_mode' | head -n1)
      modeStr=$(printf "%s" "$json" | jq -r --argjson i 16 '.[].modes[$i] | "\(.width)x\(.height)"')
    else
      modeStr="$arg_mode"
    fi

    [ "$arg_rate" ] \
      && modeStr="${modeStr}@${arg_rate}" \
      || true

    niri msg output "$arg_output" mode "$modeStr"
  fi

  [ "$arg_scale" ] \
    && niri msg output "$arg_output" scale "$arg_scale" \
    || true
}

while [ $# -gt 0 ]; do
  case "$1" in
    --output)
      shift
      arg_output=$(getArg '--output' "$1")
      ;;

    --scale)
      shift
      arg_scale=$(getArg '--scale' "$1")
      ;;

    --mode)
      shift
      arg_mode=$(getArg '--mode' "$1")
      ;;

    --rate)
      shift
      arg_rate=$(getArg '--rate' "$1")
      ;;

    --help)
      showHelp
      ;;

    *)
      printf >&2 "unknown parameter %s\n" "$1"
      showHelp
      ;;
  esac
  shift
done

if [ -z "$WAYLAND_DISPLAY" ] && [ "$DISPLAY" ]; then
  set_xrandr
elif [ "$WAYLAND_DISPLAY" ] && [ "$NIRI_SOCKET" ]; then
  set_niri
elif [ "$WAYLAND_DISPLAY" ]; then
  printf >&2 "Unsupported compositor...\n"
  exit 1
else
  printf >&2 "Neither WAYLAND_DISPLAY nor DISPLAY is set.\n"
  exit 1
fi
