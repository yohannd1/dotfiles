#!/usr/bin/env sh

# Runs a command, and sends a notification based if a condition matches.

exists() { command -v "$1" >/dev/null 2>/dev/null; }

if exists notify-send; then
  nsend() { notify-send -- "$1" "$2"; }
elif exists termux-notification; then
  nsend() { printf "%s" "$2" | termux-notification -t "$1"; }
else
  # obscure error message. meh. FIXME
  depCheck notify-send termux-notification
fi

PROGNAME=$(basename "$0")

if [ $# -lt 2 ]; then
  printf >&2 "%s\n" "Usage: $PROGNAME <NOTIFY-IF> <PROGRAM> [ARGS...]"
  printf >&2 "%s\n" "where NOTIFY-IF := { error-and-output | error-or-output | error | output }"
  exit 1
fi

notifyIf="$1"
shift

case "$notifyIf" in
  error-and-output) ;;
  error-or-output) ;;
  error|output) ;;
  *)
    printf >&2 "Invalid option; use %s --help\n" "$PROGNAME"
    exit 1
    ;;
esac

output=$("$@" 2>&1 >/dev/null)
exitCode="$?"

showErrorOrOutput() {
  [ "$exitCode" != 0 ] && type="Error" codeMsg="<$exitCode> " || type="Output" codeMsg=""

  headingMessage=$(printf '%s while running %s@(%s)' "$type" "$codeMsg" "$*")
  if [ -z "$output" ]; then
    nsend "$headingMessage" "no output provided by the application."
  else
    nsend "$headingMessage" "$output"
  fi
}

case "$notifyIf" in
  error-and-output)
    if [ "$exitCode" != 0 ] && [ "$output" ]; then
      headingMessage=$(printf 'Error code %s while running: %s' "$exitCode" "$*")
      nsend "$headingMessage" "$output"
    fi
    ;;
  error-or-output)
    [ "$exitCode" != 0 ] || [ "$output" ] && showErrorOrOutput "$@"
    ;;
  error)
    [ "$exitCode" != 0 ] && showErrorOrOutput "$@"
    ;;
  output)
    if [ "$output" ]; then
      headingMessage=$(printf 'Output of @(%s)' "$*")
      nsend "$headingMessage" "$output"
    fi
    ;;
esac
