#!/usr/bin/env python3

import os
from time import time, sleep
from pathlib import Path
from dataclasses import dataclass
from typing import Callable, Any, Optional

from subprocess import Popen
from queue import Queue, Empty
from threading import Thread, Lock

from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer, ThreadingMixIn

from watchdog.events import FileSystemEvent, FileSystemEventHandler, FileModifiedEvent
from watchdog.observers import Observer

# TODO: refactor this into a more generic utility, or something. I'd like this to be a library, but how do I set up a proper local-to-dotfiles python library anyway?

opener = os.environ.get("OPENER") or "xdg-open"


@dataclass
class Args:
    file_to_watch: Path
    output_file: Path
    katex_path: Path


class BroadcasterThread(Thread):
    def __init__(self) -> None:
        super().__init__()
        self._queue: Queue[Any] = Queue()
        self._consumers: set[Queue] = set()

    def add_consumer(self, consumer: Queue) -> None:
        self._queue.put(("add_consumer", consumer))

    def remove_consumer(self, consumer: Queue) -> None:
        self._queue.put(("remove_consumer", consumer))

    def broadcast(self, message) -> None:
        self._queue.put(("broadcast", message))

    def run(self) -> None:
        while True:
            match self._queue.get():
                case ("add_consumer", q):
                    self._consumers.add(q)
                case ("remove_consumer", q):
                    self._consumers.remove(q)
                case ("broadcast", message):
                    for c in self._consumers:
                        c.put(message)
                case _:
                    pass  # TODO: error? idk


broadcaster = BroadcasterThread()


class ChangesMonitorThread(Observer):
    def __init__(self, file_to_watch: Path):
        super().__init__()
        self._callbacks: list[tuple[Any, Callable]] = []

        cmt = self

        class Handler(FileSystemEventHandler):
            def on_any_event(self, event: FileSystemEvent) -> None:
                if Path(event.src_path) != file_to_watch:
                    return

                for event_type, callback in cmt._callbacks:
                    if isinstance(event, event_type):
                        callback(event)

        super().schedule(Handler(), file_to_watch.parent, recursive=False)

    def on_event(self, event_type) -> None:
        def inner(func):
            self._callbacks.append((event_type, func))

        return inner


def compile_file(args: Args) -> None:
    c_args: tuple = ("acr2html", args.file_to_watch)
    c_args += ("-o", args.output_file)
    c_args += ("-k", args.katex_path)

    os.environ["OPEN_NEW_WINDOW"] = "1"

    def inject_html(file) -> None:
        file.write(
            """<script>
            const es = new EventSource("/api/stream");
            es.onmessage = (_) => window.location.reload();
            // es.onmessage = (e) => console.log(e.data); // debugging
        </script>"""
        )

    exit_code = Popen(c_args).wait()

    if exit_code == 0:
        with args.output_file.open("a") as file:
            inject_html(file)
    else:
        with args.output_file.open("w") as file:
            file.write(
                "<html><h2>An error ocurred! See live-preview output for details.</h2></html>"
            )
            inject_html(file)


class CompilerThread(Thread):
    def __init__(self, args: Args):
        super().__init__()
        self._queue: Queue[Any] = Queue()
        self._args = args

    def request_compile(self) -> None:
        self._queue.put("compile")

    def request_open(self, path: str) -> None:
        self._queue.put(("open", path))

    def run(self) -> None:
        while True:
            compile = False
            open_path = None

            # wait for an item, then sleep for a while and get all that piled up
            # this way we can detected duplicated "file modified" events and avoid recompiling multiple times in a short period
            items = [self._queue.get()]
            sleep(0.2)
            while True:
                try:
                    items.append(self._queue.get(block=False))
                except Empty:
                    break

            for item in items:
                match item:
                    case "compile":
                        compile = True
                    case ("open", path):
                        open_path = path
                    case _:
                        pass  # FIXME: error!

            if compile:
                print("** Compiling **")
                compile_file(self._args)
                broadcaster.broadcast("send_reload")

            if open_path is not None:
                _ = Popen([opener, open_path])


compiler: Optional[CompilerThread] = None


def server_thread(args: Args) -> None:
    class Handler(SimpleHTTPRequestHandler):
        def __init__(self, request, client_address, server):
            super().__init__(
                request, client_address, server, directory=args.output_file.parent
            )

        def send_utf8(self, string: str) -> None:
            self.wfile.write(bytes(string, "utf-8"))

        def flush(self) -> None:
            self.wfile.flush()

        def handle_sse_stream(self) -> None:
            self.send_response(200)
            self.send_header("Content-Type", "text/event-stream")
            self.send_header("Cache-Control", "no-cache")
            self.send_header("Connection", "keep-alive")
            self.end_headers()

            queue: Queue[Any] = Queue()
            broadcaster.add_consumer(queue)
            try:
                while True:
                    match queue.get():
                        case "send_reload":
                            self.send_utf8(f"data: reload\n\n")
                            self.flush()
                        case "stop":
                            break
            except BrokenPipeError:
                print("SSE connection aborted")
            finally:
                broadcaster.remove_consumer(queue)

        def do_GET(self) -> None:
            if self.path == "/api/stream":
                self.handle_sse_stream()
                return

            super().do_GET()

    class ThreadedServer(ThreadingMixIn, TCPServer): ...

    with ThreadedServer(("localhost", 0), Handler) as httpd:
        host_r, port = httpd.server_address

        if isinstance(host_r, bytes):
            host = host_r.decode("utf-8")
        else:
            assert isinstance(host_r, str)
            host = host_r

        url = f"http://{host}:{port}"

        print(f"Server opened at {url}")

        assert compiler is not None
        compiler.request_open(f"{url}/{args.output_file.name}")

        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("KeyboardInterrupt received - server stopped")


def main() -> None:
    args = Args(
        file_to_watch=Path(os.environ["FILE_TO_WATCH"]),
        output_file=Path(os.environ["OUTPUT_FILE"]),
        katex_path=Path(os.environ["KATEX_PATH"]),
    )

    global compiler
    compiler = CompilerThread(args)
    compiler.request_compile()

    changes_monitor = ChangesMonitorThread(args.file_to_watch)

    @changes_monitor.on_event(FileModifiedEvent)
    def on_file_modified(_) -> None:
        assert compiler is not None
        compiler.request_compile()

    threads = [
        Thread(target=lambda: server_thread(args)),
        broadcaster,
        changes_monitor,
        compiler,
    ]

    for t in threads:
        t.start()

    for t in threads:
        t.join()


if __name__ == "__main__":
    main()
