#!/usr/bin/env janet

(def TMPDIR (os/getenv "TMPDIR" "/tmp"))
(def HOME (-> (os/getenv "HOME") (assert "no HOME set..?")))
(def state-path (string/format "%s/mus.state" TMPDIR))
(var *progname* nil)

(defn show-help []
  (:write stderr (-> "Usage: %s { add [FILES...] | queue | shuffle | next [AMOUNT] | prev [AMOUNT] }\n" (string/format *progname*)))
  (os/exit 2))

(defn path/basename
  "Get the base name (the last component) of a path."
  [path]

  (as-> path .x (string/split "/" .x) (last .x)))

(defn path/extension
  "Get the extension of a path."
  [path]

  (as->
    path .x
    (path/basename .x)
    (string/split "." .x)
    (if (-> .x (length) (<= 1))
      nil
      (last .x))
    ))

(defn tuple->set
  "Convert a tuple into a set (table with [`key` true] pairs)."
  [tup]

  (def tbl @{})
  (each val tup
    (set (tbl val) true))
  (table/to-struct tbl))

(defn shuffle
  "Shuffle an array."
  [arr &opt start end]

  (def i-start (or start 0))
  (def i-end (or end (length arr)))
  (loop [i :range [i-start i-end]]
    (def j (-> (math/random) (* (- i-end i-start 1)) (math/round) (+ i-start)))
    (def tmp (in arr i))
    (set (arr i) (in arr j))
    (set (arr j) tmp)
    )
  )

(def get-ext-kind
  (do
    (def music-exts
      (tuple->set ["mp3" "wav" "midi" "ogg""mus" "m4a" "opus" "flac" "ogx"]))
    (def image-exts
      (tuple->set ["png" "jpg" "jpeg"]))

    (fn [ext]
      (cond
        (-> music-exts (in ext)) :music
        (-> image-exts (in ext)) :image
        :unknown))
    ))

(defn path/exists [path]
  (-> (os/stat path) (nil?) (not)))

(defn open-writable-state-file []
  (file/open state-path :w))

(defn file-get-lines [path]
  (def file (file/open path :r))
  (defer (:close file)
    (def it (file/lines file))
    (def arr @[])
    (each line it
      (array/push arr line))
    arr
    ))

(defn load-state []
  (if (path/exists state-path)
    (do
      (def contents (file-get-lines state-path))
      (def index (-> (in contents 0) (string/trim) (scan-number)))
      (def queue (as-> contents .x (array/slice .x 1) (map string/trim .x)))
      @{:index index :queue queue}
      )
    @{:index 0 :queue @[]}
    ))

(defn save-state [state]
  (def file (open-writable-state-file))
  (defer (:close file)
    (:write file (string/format "%d\n" (in state :index)))
    (each p (in state :queue)
      (:write file (string p "\n"))
      )))

(defn main [arg0 & args]
  (set *progname* (path/basename arg0))
  (def args-len (length args))

  (when (= args-len 0) (show-help))

  (match (in args 0)
    "add"
    (do
      (def state (load-state))

      (defn add-song [fname]
        (assert (path/exists fname) (string/format "file %s does not exist" fname))
        (def real (os/realpath fname))
        (def ext (path/extension real))

        (case (get-ext-kind ext)
          :music (array/push (in state :queue) real)
          :image nil # do nothing
          :unknown (eprintf "warning: skipping %s (unsupported extension %j)" fname ext)
          ))

      (each arg (array/slice args 1)
        (if (= arg "-")
          (while (def fname (:read stdin :line))
            (add-song (string/trim fname)))
          (add-song arg)
          ))

      (save-state state)
      )

    "clear"
    (do
      (def state (load-state))
      (set (state :index) 0)
      (-> state (in :queue) (array/clear))
      (save-state state)
      )

    "queue"
    (do
      (when (> args-len 1) (show-help))
      (def state (load-state))
      (loop [:let [index (in state :index)
                   queue (in state :queue)]
             [i path] :pairs queue]
        # (def final-path
        #   (if (string/has-prefix? HOME path)
        #     (string/replace HOME "~" path)
        #     path))
        (def final-path (path/basename path))
        (def prefix
          (cond
            (< i index) "  "
            (= i index) "* "
            (> i index) "- "
            ))
        (printf "%s%s" prefix final-path)
        ))

    "shuffle"
    (do
      (when (> args-len 1) (show-help))
      (def state (load-state))

      (def index (in state :index))
      (def queue (in state :queue))
      (if (< (+ index 1) (length queue))
        (shuffle queue (+ index 1))
        (eprintf "no elements to shuffle.")
        )

      (save-state state)
      )

    "next"
    (do
      (when (> args-len 2) (show-help))

      (def state (load-state))
      (def amount (-> args (get 1) (or "1") (scan-number) (math/floor)))
      (set (state :index) (-> state (in :index) (+ amount)))
      (save-state state)
      )

    "prev"
    (do
      (when (> args-len 2) (show-help))

      (def state (load-state))
      (def amount (-> args (get 1) (or "1") (scan-number) (math/floor)))
      (set (state :index) (-> state (in :index) (- amount) (max 0)))
      (save-state state)
      )

    "play"
    (do
      (when (> args-len 1) (show-help))

      (prompt 'loop
        (while true
          (def state (load-state))
          (def index (in state :index))
          (def queue (in state :queue))

          (when (>= index (length queue))
            (eprintf "no more songs to play.")
            (return 'loop))

          (def cur-song (in queue index))
          (eprintf "playing %s..." cur-song)
          (os/execute ["mpv" "--no-video" cur-song] :p)

          (def state2 (load-state))
          (def cur-song2 (-> state2 (in :queue) (in (in state2 :index))))

          (if (= cur-song cur-song2)
            (do
              (set (state2 :index) (-> state2 (in :index) (+ 1)))
              (save-state state2)
              )
            (eprintf "warning: current song isn't what I thought it was. I'm lost.")
            )
          ))
      )

    unk (show-help)
    )
  )
