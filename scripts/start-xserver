#!/usr/bin/env sh

# starts an X server

progname=$(basename "$0")

calc() { printf "%s\n" "$1" | bc; }

default_initrc="${XDG_CONFIG_HOME:-$HOME/.config}/xorg/xinitrc"

case $# in
  0) initrc="$default_initrc" ;;
  1) initrc="$1" ;;
  2)
    printf >&2 "%s: invalid amount of arguments\n" "$progname"
    printf >&2 "Usage: %s [INITRC]\n" "$progname"
    printf >&2 "INITRC defaults to %s if not specified.\n" "$default_initrc"
    exit 1
    ;;
esac

if [ ! -f "$initrc" ] || [ ! -r "$initrc" ]; then
  printf >&2 "Could not open init file %s\n" "$initrc"
  exit 1
fi

if [ "$DISPLAY" ] && [ -z "$USE_XEPHYR" ]; then
  printf >&2 '$DISPLAY is set, an X server is probably already running; aborting\n'
  exit 1
fi

# generate config
gen-config || exit 1

# get tty numbers
tty=$(tty)
if printf "%s" "$tty" | grep -q '^/dev/tty'; then
  tty=${tty#/dev/tty}
elif [ "$USE_XEPHYR" ]; then
  # TODO: find a way to detect if this specific display is being used
  tty=$(printf "%04d" "$(shuf -i 10-9999 -n 1)")
elif test "$SX_TTY"; then
  tty=${SX_TTY#/dev/tty}
else
  printf >&2 "%s\n" "Unknown TTY string: '$tty'"
  exit 1
fi

export XSESSIONDIR="/tmp/xsessions/$tty"
[ -d "$XSESSIONDIR" ] && rm -r "$XSESSIONDIR"
mkdir -p "$XSESSIONDIR"

printf >&2 "Starting at %s\n" "$(date +"%Y/%m/%d %H:%M:%S")"
printf >&2 "Using display ID %s\n" ":$tty"

if [ -z "$USE_XEPHYR" ]; then
  startx "$initrc" -- :"$tty" \
         -ardelay "${KBRATE_DELAY:-175}" \
         -arinterval "$(calc "${KBRATE_INTERVAL:-37} * 0.5")" \
         2>&1 | tee "$XSESSIONDIR/xlog"
  exitCode="$?"
else
  # start xephyr
  Xephyr -br -ac -noreset -screen "${XEPHYR_RES:-800x600}" :"$tty" &
  xephyrPid="$!"

  # wait a little bit
  sleep 1

  # start everything
  DISPLAY=:"$tty" "$initrc" &
  initrcPid="$!"

  wait "$xephyrPid"
  exitCode="$?"
  kill -s 0 "$initrcPid" && kill "$initrcPid"
fi

printf >&2 "Finished at %s\n" "$(date +"%Y/%m/%d %H:%M:%S")"
printf >&2 "Exit code: %s\n" "$exitCode"

if [ -z "$NO_SAFETY_LOGOUT_MESSAGE" ] && [ -z "$USE_XEPHYR" ] && [ "$exitCode" != 0 ]; then
  printf >&2 "Xorg server failed! It is recommended to log out for security reasons (this can be detected by the exit code != 0).\n"
  printf >&2 "If ya the hacker, lucky you! You now have access to this machine.\n"
fi

exit "$exitCode"
