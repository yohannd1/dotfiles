#!/usr/bin/env lua
-- vim: sw=2

-- A small script that outputs xresources based on some configurations. I made
-- this because managing a raw xresources file is very annoying - the C
-- preprocessor is annoying af.

local function tableSize(t)
  local x = 0
  for _, _ in pairs(t) do
    x = x + 1
  end
  return x
end

local function tablePrintAll(t, fd)
  fd = fd or io.stderr

  for k, v in pairs(t) do
    fd:write(k, " => ", v, "\n")
  end
end

local function fileExists(name)
  local f = io.open(name, "r")
  if f ~= nil then
    f:close()
    return true
  else
    return false
  end
end

local theme = {}
do
  local theme_proc = assert(io.popen("load-base16-theme", "r"))
  for line in theme_proc:lines() do
    if line:match("^%s*$") then
      -- skip
    elseif line:match('^base0[0-9A-F]="#' .. string.rep("[0-9a-fA-F]", 6) .. '"$') then
      local name = line:gsub('^(base0[0-9A-F]).*$', "%1")
      local value = line:gsub(('^base0[0-9A-F]="(#' .. string.rep("[0-9a-fA-F]", 6) .. ')"$'), "%1")
      theme[name] = value
    else
      io.stderr:write("Failed to parse (load-base16-theme) line: ", string.format("%q", line), "\n")
      os.exit(1)
    end
  end
  theme_proc:close()
end

if tableSize(theme) ~= 16 then
  io.stderr:write("Failed to get all 16 colors. Table contents:\n")
  tablePrintAll(theme, io.stderr)
  os.exit(1)
end

local DOTFILES = os.getenv("DOTFILES")
if DOTFILES == nil then
  io.stderr:write("Failed to get DOTFILES env var.\n")
  os.exit(1)
end

local resources_file = DOTFILES .. "/config/dots/resources.lua"
if not fileExists(resources_file) then
  io.stderr:write("File ", string.format("%q", resources_file), " doesn't seem to exist. The configuration should be there.\n")
  os.exit(1)
end

local _meta = {}
_G._meta = _meta

-- Make the current base16 theme accessible
_meta.theme = theme

-- The different available targets. This table store functions which are used as identifiers and also as converters.
_meta.targets = {}

_meta.targets.xresources = function(stream, key, val)
  stream:write(key, ": ", val, "\n")
end
_meta.targets.dotcfg = function(stream, key, val)
  stream:write("set:", key, ":", val, "\n")
end

local current_target = nil
if arg[1] == "xresources" then
  current_target = _meta.targets.xresources
elseif arg[1] == "dotcfg" then
  current_target = _meta.targets.dotcfg
else
  io.stderr:write("Bad argument #1 (expected { xresources | dotcfg })\n")
  os.exit(1)
end

local containedIn = function(haystack, needle)
  for _, x in ipairs(haystack) do
    if x == needle then
      return true
    end
  end

  return false
end

local declarations = {}

_meta.decl = function(args)
  local targets = assert(args.targets, "`targets` field not specified")
  if not containedIn(targets, current_target) then
    return
  end

  for _, e in ipairs(args) do
    declarations[e[1]] = e[2]
  end
end

assert(loadfile(resources_file))()

for k, v in pairs(declarations) do
  current_target(io.stdout, k, v)
end
