#!/usr/bin/env lua
-- vim: sw=2 et

local lfs = require("lfs")

local HOME = os.getenv("HOME") or error("_")
local XDG_CACHE_HOME = os.getenv("XDG_CACHE_HOME") or (HOME .. "/.cache")

local ACW_CACHE_DIR = os.getenv("ACW_CACHE_DIR") or (XDG_CACHE_HOME .. "/acw")
local DATA_PATH = ACW_CACHE_DIR .. "/list-titles-cache"

local ACR_WIKI_DIR = HOME .. "/wiki/vimwiki"

if ACR_WIKI_DIR == nil or ACR_WIKI_DIR == "" then
  io.stderr:write("error: ACR_WIKI_DIR is not set\n")
  os.exit(1)
end

local function fileExists(file)
  local ok, err, code = os.rename(file, file)
  if not ok then
    if code == 13 then
      -- Permission denied, but it exists
      return true
    end
  end
  return ok, err
end

local function isDirectory(path)
  return lfs.attributes(path, "mode") == "directory"
end

if not isDirectory(ACR_WIKI_DIR) then
  assert(lfs.mkdir(ACR_WIKI_DIR))
end

local function getNoteTitle(file)
  local first_line = file:read("*line")

  if first_line == nil then
    -- No first line means the file is empty
    return nil
  end

  if first_line:match("^%s*=%s*.*%s*=%s*$") then
    return first_line:gsub("^%s*=%s*", ""):gsub("%s*=%s*$", "")
  elseif first_line:match("^%s*%%:title%s+.*%s*$") then
    return first_line:gsub("^%s*%%:title%s+", ""):gsub("%s*$", "")
  else
    return nil
  end
end

local function fileIter(dir)
  return coroutine.wrap(function()
    for entry in lfs.dir(dir) do
      if not isDirectory(dir .. "/" .. entry) then
        coroutine.yield(entry)
      end
    end
  end)
end

local function split(text, separator)
  separator = separator or " "

  local separator_len = string.len(separator)

  local result = {}
  local current_index = 1
  while true do
    local f = text:find(separator, current_index)

    if f == nil then
      table.insert(result, text:sub(current_index))
      break
    else
      table.insert(result, text:sub(current_index, f - 1))
      current_index = f + separator_len
    end
  end

  return result
end

local last_gen_time = fileExists(DATA_PATH)
  and lfs.attributes(DATA_PATH, "modification")
  or 0
local wiki_mod_time = assert(lfs.attributes(ACR_WIKI_DIR, "modification"))

if fileExists(DATA_PATH) and last_gen_time >= wiki_mod_time then
  -- The data file path exists and it's updated.
  -- Just parse the file and output its contents, as nothing here seems to have been modified recently.

  local in_fd = assert(io.open(DATA_PATH, "r"))

  local line
  while true do
    line = in_fd:read("*line")
    if line == nil then break end

    local id, _, title = table.unpack(split(line, "\t"))
    io.stdout:write(id, " ", title, "\n")
  end

  in_fd:close()
elseif fileExists(DATA_PATH) then
  -- The data file exists but it's not updated.
  -- Open it and decide, for each file, if it's updated enough.
  -- TODO: delete entries of files that don't exist anymore

  local entries = {}
  local should_rewrite = false

  do
    -- First of all, read the current existing data.
    local in_fd = assert(io.open(DATA_PATH, "r"))
    local line
    while true do
      line = in_fd:read("*line")
      if line == nil then break end

      local id, mod_time, title = table.unpack(split(line, "\t"))
      entries[id] = {mod_time = mod_time, title = title}
    end
    in_fd:close()
  end

  -- Then go through the list of files, update the ones that need it and print them to the screen.
  for file in fileIter(ACR_WIKI_DIR) do
    if file:match("%.acr$") then
      local file_path = ACR_WIKI_DIR .. "/" .. file
      local id = file:gsub("%.acr$", "")

      local mod_time = assert(lfs.attributes(file_path, "modification"))
      local entry_at = entries[id]
      if entry_at and entry_at.mod_time == mod_time then
        io.stdout:write(id, " ", entry_at.title, "\n")
      else
        should_rewrite = true -- we should rewrite to the data path file

        local file_fd = assert(io.open(file_path))
        local title = getNoteTitle(file_fd) or "<No Title>"
        file_fd:close()

        entries[id] = {title = title, mod_time = mod_time}
        io.stdout:write(id, " ", title, "\n")
      end
    end
  end

  -- For last, write back to the data file, if we need to.
  if should_rewrite then
    local out_fd = assert(io.open(DATA_PATH, "w"))
    for id, entry in pairs(entries) do
      out_fd:write(id, "\t", entry.mod_time, "\t", entry.title, "\n")
    end
    out_fd:close()
  end
else
  -- The data file doesn't exist at all.
  -- Generate the entire file, as we do not have it.

  local out_fd = assert(io.open(DATA_PATH, "w"))
  for file in fileIter(ACR_WIKI_DIR) do
    if file:match("%.acr$") then
      local file_path = ACR_WIKI_DIR .. "/" .. file
      local id = file:gsub("%.acr$", "")
      local title = getNoteTitle(assert(io.open(file_path))) or "<No Title>"
      local mod_time = assert(lfs.attributes(file_path, "modification"))

      io.stdout:write(id, " ", title, "\n")
      out_fd:write(id, "\t", mod_time, "\t", title, "\n")
    end
  end
  out_fd:close()
end
