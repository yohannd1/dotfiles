#!/usr/bin/env janet
# vim: foldmethod=marker foldenable foldmarker=<<<,>>>

# Preparations <<<

(use dotf-path)
(use dotf-utils)

(defn dev-null []
  (assert (file/open "/dev/null" :r)))

(var *open-gui* (-> (os/getenv "OPEN_GUI" "") (length) (> 0)))
(var *open-new-window* (-> (os/getenv "OPEN_NEW_WINDOW" "") (length) (> 0)))
(var *is-termux* (-> (os/getenv "TERMUX_APP_PID") (nil?) (not)))

(defn state/init [file-arg]
  (var file file-arg)

  (def peg-url-protocol
    '{:a-z (choice (range "az") (range "AZ"))
      :main (* (capture (some :a-z)) "://")})

  (def peg-file-ext
    '{:main (* (? "./") :non-dot (some :extension))
      :non-dot (some (if-not "." 1))
      :extension (* "." (<- :non-dot))
      })

  (def open-alt (os/getenv "OPEN_ALT" "xdg-open"))

  (var protocol
    (-?> (peg/match peg-url-protocol file) (in 0)))

  # normalize filename if it's a file:// protocol
  (when (= protocol "file")
    (set protocol nil)
    (set file (string/slice file (length "file://"))))

  (def mime
    (-?> ["file" "-E" "--dereference" "--brief" "--mime-type" "--" file]
         (run<stdout) (string/trim)))

  (def ext
    (if (nil? protocol)
      (-?> (peg/match peg-file-ext file) (last) (string/ascii-lower))
      nil))

  @{:open-alt open-alt
    :file file
    :mime mime
    :ext ext
    :protocol protocol})

(defn state/try
  "Try to open.
  `-type` can be
    :gui to block stdin and redirect stderr, useful for GUI apps;
    :tty to directly open the program in the TTY, if possible;
    :pop to run as TTY if possible, but opening it via `d.tpop` if not;
    :fallback to open the alt program specified by OPEN_ALT;
    :block to not run the file and exit immediately"
  [self -type &opt -args]

  (def
    {:open-alt open-alt
     :file file
     :mime mime
     :protocol protocol
     :ext ext}
    self)

  (defn prog-exists [progn]
    (def args ["which" progn])
    (def pipes {:out (dev-null) :err (dev-null)})
    (-> (os/execute args :p pipes) (= 0)))

  (defn condit-open [prog]
    (when (prog-exists (-args 0))
      (if *open-gui*
        (os/exit (os/execute [;prog ;-args] :p {:in (dev-null) :err stdout}))
        (exec-replace -args))))

  (case -type
    :gui
    (when (and *open-gui* (prog-exists (-args 0)))
      (os/exit (os/execute -args :p {:in (dev-null) :err stdout})))

    :tty
    (when (and (not *open-gui*) (prog-exists (-args 0)))
      (exec-replace -args))

    :pop
    (condit-open ["d.tpop"])

    :runpage
    (condit-open ["d.tpop" "runpage"])

    :fallback
    (os/exit (os/execute [open-alt file] :p))

    :xdg
    (do
      (os/setenv "VIA_OPEN" "1")
      (exec-replace ["xdg-open" file]))

    :block
    (die 1 "attempted to open blocked file (%s)\nMIME: %j; EXT: %j\n"
         file mime ext)

    (error (string/format "unknown action for symbol %s" -type))
    ))

(defn warn [msg]
  (if *open-gui*
    (os/execute ["notify-send" "--" msg] :px)
    (do
      (:write stderr msg)
      (:write stderr "\n"))))

(defn state/match [self mtype marg]
  (def
    {:mime mime
     :ext ext
     :protocol protocol}
    self)

  (defn go-through [list src-str]
    (unless (nil? src-str)
      (var ret false)
      (each elem list
        (cond
          (string? elem)
          (when (= src-str elem)
            (set ret true)
            (break))

          (tuple? elem)
          (match elem
            [:begins str]
            (when (string/has-prefix? str src-str)
              (set ret true)
              (break))

            [:ends str]
            (when (string/has-suffix? str src-str)
              (set ret true)
              (break))

            _ (-> "bad format for tuple-match: %j" (string/format elem) (error)))

          (-> "expected tuple or string, got %j" (string/format elem) (error))
          ))
      ret))

  (match mtype
    :mime (go-through marg mime)
    :ext (go-through marg ext)
    :protocol (go-through marg protocol)
    _ (error (string/format "Unknown action for symbol %s" mtype))))
# >>>

(defn main [arg0 & args]
  (def progname (path/basename arg0))

  (when (nil? (os/getenv "WAYLAND_DISPLAY"))
    (set *open-gui* true)
    (os/setenv "OPEN_GUI" "1"))

  (def help-str
    (string
      "Usage: " progname " { <FILE> | <URL> }\n"
      "Environment variables:\n"
      "  OPEN_GUI: forces to open only apps in GUI mode.\n"
      "  OPEN_ALT: a fallback opener; default is xdg-open"))

  (when (-> args (length) (not= 1))
    (die 2 "%s" help-str))

  (def s (state/init (in args 0)))
  (def {:file file :protocol protocol} s)
  (def web-protocols (make-set ["http" "https"]))

  (when (and *is-termux* *open-gui*)
    (cond
      (nil? protocol)
      (let [real-file (os/realpath file)]
        (if (->> real-file (string/has-prefix? "/storage/emulated/0/"))
          (exec-replace ["termux-open" real-file])
          (die 1 "path %s is not externally openable" real-file))))

      (in web-protocols protocol)
      (exec-replace ["termux-open" file]))

  (defn t [-type &opt -arg] (state/try s -type -arg))
  (defn m [-type -arg] (state/match s -type -arg))
  (defn mt [mtype marg ttype &opt targ]
    (when (m mtype marg) (t ttype targ)))

  (def FILEMAN (os/getenv "FILEMAN"))
  (def BROWSER (os/getenv "BROWSER"))
  (def TERMBROWSER (os/getenv "TERMBROWSER"))
  (def EDITOR (os/getenv "EDITOR"))

  # (mt :mime [[:begins "application/"]] :block)

  (mt :mime ["inode/directory"] :pop [FILEMAN file])
  (mt :mime ["text/troff"] :runpage ["man" "-l" file])
  (when (or (m :mime ["inode/x-empty" [:ends "/xml"]])
            (m :ext ["txt" "log"]))
    (t :runpage ["cat" file]))

  (defn try-browser []
    (def args @[])
    (def known-browsers
      (comptime (make-set ["librewolf" "firefox"])))
    (when (and *open-new-window* (in known-browsers BROWSER))
      (array/push args "--new-window"))
    (t :gui [BROWSER ;args file]))

  # urls
  (mt :protocol ["vscode" "steam" "appstream"] :xdg)
  (when (m :protocol ["http" "https"])
    (try-browser)
    (t :tty [TERMBROWSER file]))

  # midi
  (when (m :ext ["mid" "midi"])
    (t :pop ["play-midi" file])
    (t :pop ["mpv" "--no-video" file]))

  # project files
  (mt :ext ["drawio"] :gui ["drawio" file])
  (mt :ext ["yyp"] :gui ["GameMaker" file])

  # godot project files
  (when (m :ext ["godot"])
    (def folder (path/dirname file))
    (def is-cs-project
      (as->
        (os/dir folder) .x
        (filter |(string/has-suffix? ".csproj" $) .x)
        (not (empty? .x))))
    (if is-cs-project
      (t :gui ["godot-mono" "-e" file])
      (t :gui ["godot" "-e" file]))
    )

  (def is-openmpt-compatible
    (m :ext ["mod" "it" "s3m" "mptm"]))

  # audio files
  (when
    (or (and
          (not is-openmpt-compatible)
          (m :mime [[:begins "audio/"]]))
        (m :ext ["aac" "flac" "m4a" "mpa" "mp2" "mp3"
                 "ogg" "wav" "wma"]))

    (t :pop ["mpv" "--no-video" file])
    (t :pop ["mocplay" file "opener"])
    (t :tty ["exiftool" file])
    (t :runpage ["mediainfo" file]))

  # music projects
  (mt :ext ["kdenlive"] :gui ["kdenlive" file])
  (mt :ext ["sunvox"] :gui ["sunvox" file])
  (when (m :ext ["ardour"])
    (t :gui ["ardour8" file])
    (t :gui ["ardour7" file])
    (t :gui ["ardour6" file]))
  (when (m :ext ["mmp" "mmpz"])
    (t :gui ["@lmms" file])
    (t :gui ["lmms" file]))
  (mt :ext ["flp"] :gui ["@fl-studio" file])
  (mt :ext ["zpj"] :gui ["zrythm" file])
  (mt :ext ["rad"] :gui ["radium" file])
  (mt :ext ["fms"] :gui ["famistudio" file])
  (mt :ext ["osctet"] :gui ["osctet" file])
  (mt :ext ["rpp"] :gui ["reaper" file])

  # image
  (when (m :mime ["image/vnd.djvu"])
    (t :runpage ["djvutxt" file])
    (t :runpage ["exiftool" file]))
  (when (or (m :mime [[:begins "image/"]])
            (m :ext ["gif" "jpg" "png" "webp"]))
    (t :gui ["sxiv" "-p" file])
    (t :runpage ["viu" "-n" file])
    (t :runpage ["img2txt" "--gamma=0.6" "--" file])
    (t :runpage ["exiftool" file]))

  # music modules
  (when is-openmpt-compatible
    (t :gui ["@openmpt" file])
    (t :pop ["openmpt123" file]))
  (mt :ext ["fur" "dmf"] :gui ["furnace" file])
  (mt :ext ["dnm" "0cc"] :gui ["@dn-famitracker" file])
  (mt :ext ["ptcop"] :gui ["@ptcollab" file])
  (mt :ext ["btm"] :gui ["BambooTracker" file])

  # chiptune files
  (mt :ext ["nsf"] :pop ["nosefart" file])
  (mt :ext ["spc"] :gui ["vspcplay" file])
  (mt :ext ["vgm" "vgz"] :pop ["vgmplay" file])

  (mt :ext ["swf"] :gui ["flashplayer" file])

  (def is-pdf
    (or (m :ext ["pdf"])
        (m :mime ["application/pdf"])))

  (when (or is-pdf (m :ext ["djvu" "ps" "epub"]))
    (t :gui ["zathura" file])
    (t :gui ["okular" file])
    (t :gui ["mupdf" file]))

  (mt :ext ["xps"] :gui ["mupdf" file])

  (when is-pdf
    (t :runpage ["pdftotext" "-l" "10" "-nopgbrk" "-q" "--" file "-"])
    (t :runpage ["mutool" "draw" "-F" "txt" "-i" "--" file "1-10"])
    (t :runpage ["exiftool" file]))

  (when (or (m :mime [[:begins "video/"]])
            (m :ext ["avi" "mkv" "mp4" "webm"]))
    (t :gui ["smplayer" file])
    (t :gui ["mpv" file])
    (t :tty ["mpv" "--no-video" file])
    (t :runpage ["mediainfo" file]))

  (mt :ext ["rar"] :runpage ["unrar" "l" "-p-" "--" file])
  (mt :ext ["7z"] :runpage ["7z" "l" "-p" "--" file])

  (when (m :ext ["a" "ace" "alz" "arc" "arj" "bz" "bz2" "cab" "cpio" "deb" "gz" "jar"
                 "lha" "lz" "lzh" "lzma" "lzo" "rpm" "rz" "t7z" "tar" "tbz2" "tgz"
                 "tlz" "txz" "tZ" "tzo" "war" "xpi" "xz" "Z" "zip"])
    (t :runpage ["atool" "--list" "--" file])
    (t :runpage ["bsdtar" "--list" "--file" file]))

  (when (m :ext ["torrent"])
    (t :pop ["rtorrent" file])
    (t :runpage ["transmission-show" "--" file]))

  (when (m :ext ["csv"])
    (t :pop ["csvlens" file])
    (t :gui ["libreoffice" "--nologo" "--calc" file]))

  (mt :ext
      [
       "odt" "rtf" "docx" "doc" # text documents
       "odp" "pptx" "ppt" # presentation
       "ods" "xlsx" "xls" # spreadsheet
       "odg" # drawing
       ]
      :gui ["libreoffice" "--nologo" file])

  (mt :ext ["odt" "ods" "odp" "sxw"]
      :runpage ["odt2txt" file])

  (mt :ext ["kra"] :gui ["krita" file])
  (mt :ext ["pxo"] :gui ["pixelorama" file])
  (mt :ext ["blend"] :gui ["@blender" file])
  (mt :ext ["tic"] :gui ["tic80" file])
  (mt :ext ["rpy"] :pop [EDITOR file])
  (mt :ext ["ipynb"] :gui ["codium" file]) # vscode is decent for notebooks

  (when (m :ext ["md"])
    # (t :runpage ["glowrapper" file])
    (t :gui ["md-preview" file]))

  (when (m :ext ["tex"])
    (t :pop ["rifle-run" "run" "tex" file]))

  (when (m :ext ["acr"])
    (t :pop ["rifle-run" "run" "acrylic" file]))

  (when (m :ext ["htm" "html" "xhtml" "mhtml"])
    (try-browser)
    (t :runpage ["w3m" "-dump" file])
    (t :runpage ["lynx" "-dump" "--" file])
    (t :runpage ["elinks" "-dump" file]))

  (when (m :ext ["json"])
    (t :runpage ["jq" "--color-output" "." file])
    (t :runpage ["python3" "-m" "json.tool" "--" file]))

  (when (m :ext ["vcd" "ghw"])
    (t :gui ["gtkwave" file])
    (t :gui ["pulseview" "-c" file]))

  (mt :ext ["gtkw"] :gui ["gtkwave" file])

  (mt :ext ["asta"] :gui ["astah-uml" file])
  (mt :ext ["dot"] :gui ["rifle-run" "run" "dot" file])

  (t :fallback))
