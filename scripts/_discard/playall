#!/usr/bin/env python3

import random
import os, sys
import subprocess as sp
import argparse as ap
from pathlib import Path
from enum import Enum

IGNORE_EXTENSIONS = {"png", "jpg", "jpeg", "txt", "gif", "zip", "tar"}
VALID_EXTENSIONS = {"mp3", "wav", "ogg", "flac", "opus", "m4a", "mp", "mp4", "mid", "midi"}

class PlayResult(Enum):
    OK = 0
    SKIP = 1
    REPEAT = 2
    QUIT = 3
    UNKNOWN_EXTENSION = 4

def main():
    parser = init_parser()
    opts = parser.parse_args(sys.argv[1:])
    folder = Path(opts.folder) if opts.folder else Path.cwd()

    if opts.recursive:
        recursive = True
    elif opts.not_recursive:
        recursive = False
    else:
        recursive = True

    def has_ignorable_extension(file):
        for extension in IGNORE_EXTENSIONS:
            if file.name.endswith(extension):
                return True
        return False

    eprint("Getting file list...")
    files = [file for file in
             get_files(folder, recursive=recursive)
             if not has_ignorable_extension(file)]

    if opts.shuffle:
        eprint("Shuffling songs list...")
        random.shuffle(files)
    else:
        eprint("Sorting songs list...")
        files.sort()

    eprint("Ready to play!")

    starting_offset = opts.starting_offset[0] if opts.starting_offset else 0
    limit = opts.limit[0] if opts.limit else None

    limit_count = 0
    slice = files[starting_offset:]

    i = 0
    while i < len(slice):
        file = slice[i]
        name = file.name

        match play_song(file, i, len(slice)):
            case PlayResult.OK:
                limit_count += 1
                i += 1
            case PlayResult.UNKNOWN_EXTENSION:
                eprint(f"File {file} has unknown extension")
                limit_count += 1
                i += 1
            case PlayResult.SKIP:
                i += 1
            case PlayResult.REPEAT:
                pass
            case PlayResult.QUIT:
                break

        limit_count += 1
        if limit:
            if limit_count >= limit:
                eprint("limit exceeded; finishing...")
                break
            else:
                eprint(f"{limit - limit_count} songs left...")

def eprint(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)

def play_song(file: Path, i: int, length: int) -> PlayResult:
    name = file.name

    # check extension validity
    for extension in VALID_EXTENSIONS:
        if name.endswith(extension):
            break
    else:
        return PlayResult.UNKNOWN_EXTENSION

    # show header
    os.system("tput reset")
    eprint(f"Playing file {i + 1} of {length}: {file}")

    # build command
    if name.endswith("mid") or name.endswith("midi"):
        proc_call = ["play-midi", str(file)]
    else:
        proc_call = ["mpv", "--no-video", str(file)]

    with sp.Popen(proc_call, encoding="UTF-8") as proc:
        try:
            errored = (proc.wait() != 0)
        except KeyboardInterrupt:
            errored = True

        if not errored:
            return PlayResult.OK

        try:
            inc_limitc = False # so the count doesn't go up, necessarily.
            eprint(
                "Playback seems to have failed. What do you want to do now?\n"
                + "(R)etry, (S)kip to next, (Q)uit\n"
                + "[r/S/q] ",
                end=""
            )

            match input().lower():
                case "r":
                    return PlayResult.REPEAT
                case "s":
                    return PlayResult.SKIP
                case "q":
                    return PlayResult.QUIT
                case o:
                    eprint(f"Unknown option {o}. Defaulting to retry...")
                    return PlayResult.SKIP
        except KeyboardInterrupt:
            eprint("\n^C received. Aborting...")
            return PlayResult.QUIT
        except EOFError:
            eprint("\nEOF error received. Aborting...")
            return PlayResult.QUIT

def get_files(folder: Path, recursive=True):
    listing = []

    for f in folder.iterdir():
        if f.is_file():
            listing.append(f)
        elif f.is_dir():
            if recursive:
                listing.extend(get_files(f, recursive=True))

    return listing

def init_parser() -> ap.ArgumentParser:
    parser = ap.ArgumentParser(
        prog=Path(sys.argv[0]).name,
        description="play a folder of songs",
    )

    parser.add_argument(
        "folder",
        help="the folder where the list of files should be obtained from - defaults to current directory",
        action="store",
        nargs='?',
        type=str,
    )

    parser.add_argument(
        "-s", "--shuffle",
        help="if the files list should be shuffled or not",
        action="store_true",
    )

    gp = parser.add_mutually_exclusive_group(required=False)

    gp.add_argument(
        "-r", "--recursive",
        help="make the listing recursive",
        action="store_true",
    )

    gp.add_argument(
        "-o", "--starting-offset",
        help="the starting offset of the list (essentially useless if --shuffle is enabled)",
        nargs=1,
        type=int,
        action="store",
    )

    gp.add_argument(
        "-l", "--limit",
        help="the maximum amount of songs to play",
        nargs=1,
        type=int,
        action="store",
    )

    gp.add_argument(
        "-R", "--not-recursive",
        help="make the listing non-recursive",
        action="store_true",
    )

    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"{parser.prog} v. VOID",
    )

    return parser

if __name__ == "__main__":
    main()
