#!/usr/bin/env python3

from collections import OrderedDict
import re
import subprocess as sp
from time import time, strftime

from lemonbar_manager import Module, Manager

class Theme:
    FG = "#FBF1C7"
    BG = "#282828"
    BLACK = "#282828"
    RED = "#9D0006"
    GREEN = "#79740E"
    YELLOW = "#B57614"
    BLUE = "#076678"
    MAGENTA = "#8F3F71"
    CYAN = "#427B58"
    WHITE = "#32302F"
    LABEL = "#64605E"

class Const(Module):
    def __init__(self, value: str):
        super().__init__()
        self._value = value

    def output(self):
        return self._value

class Label(Module):
    def __init__(self, value: str):
        super().__init__()
        self._value = value

    def output(self):
        return "%{F" + Theme.LABEL + "}" + self._value + "%{F-}"

class File(Module):
    def __init__(self, file: str):
        super().__init__()
        self._file = file
        self.wait_time = 30

    def output(self):
        with open(self._file, "r") as f:
            return f.read().strip()

class CpuModule(Module):
    def __init__(self):
        super().__init__()
        self.wait_time = 30

    def output(self):
        data = None
        with open("/proc/stat", "r") as f:
            data = f.readlines()[0].split()

        usage = (float(data[1]) + float(data[3])) * 100 / (float(data[1]) + float(data[3]) + float(data[4]))
        return "{:.0f}%".format(usage)

class MemoryUsage(Module):
    RAM = object()
    SWAP = object()

    def __init__(self, mode):
        super().__init__()
        self.wait_time = 30

        if mode == self.RAM:
            self._line_number = 1
        elif mode == self.SWAP:
            self._line_number = 2
        else:
            raise Exception("mode must be MemoryUsage.RAM or MemoryUsage.SWAP")

    def output(self):
        data = sp.Popen(
            ["free", "-m"], stdout=sp.PIPE, encoding='UTF-8'
        ).stdout.readlines()[self._line_number].strip().split()

        return "{:.0f}%".format(float(data[2]) * 100 / float(data[1]))

class Launcher(Module):
    def __init__(self, label, command):
        """A simple clickable element to launch a program.

        Parameters:
            label (str): The string to write to the bar.
            command (list): The command to execute (with Popen)
        """
        super().__init__()

        self._label = label
        self._command = command
        self._event_name = '{}_click'.format(self._label)

    def output(self):
        return '%{A:' + self._event_name + ':}' + self._label + '%{A}'

    def handle_event(self, event):
        """Handle out click event.

        Parameters:
            event (str): The event name.
        """
        if event != self._event_name:  # Ignore the event if it's not ours
            return

        sp.Popen(self._command)

class Clock(Module):
    def __init__(self):
        """A simple clock.

        The clock can be clicked and will switch to the date for a period of
        time.
        """
        super().__init__()
        self.wait_time = 60  # How often to update this module

    def output(self):
        return strftime("%m/%d %H:%M")

class Volume(Module):
    def __init__(self, device):
        """A simple ALSA volume control.

        Parameters:
            device (str): The name of the ALSA device to control.
        """
        super().__init__()
        self._device = device

        self._pactl_subscribe = sp.Popen(
            ['pactl', 'subscribe'], stdout=sp.PIPE, encoding='UTF-8'
        )
        self.readables = [self._pactl_subscribe.stdout]

        self._regex = re.compile(r'(\d{1,3})%') # For parsing ALSA output
        self._off_regex = re.compile(r'\[off\]$') # For parsing ALSA output

    def _parse_amixer(self, data):
        """Parse the output from the amixer command.

        Parameters:
            data (str): The output from amixer.

        Returns:
            int: An integer between 0 and 100 (inclusive) representing the
                volume level.
        """
        if re.findall(self._off_regex, data):
            return "OFF"

        levels = [int(level) for level in re.findall(self._regex, data)]
        return "{:.0f}%".format(sum(levels) / len(levels))

    def _get_level(self):
        """Get the current volume level for the device.

        Returns:
            int: An integer between 0 and 100 (inclusive) representing the
                volume level.
        """
        process = sp.run(
            ['amixer', 'get', self._device],
            stdout=sp.PIPE,
            encoding='UTF-8',
        )

        return self._parse_amixer(process.stdout)

    def output(self):
        return self._get_level()

class BSPWM(Module):
    def __init__(self, monitor):
        """A BSPWM desktop indicator.

        Parameters:
            monitor (str): The name of the monitor to show the desktop status
                for.
        """
        super().__init__()

        # Subscribe to BSPWM events and make the `Manager` class wait on it's
        # stdout before updating the module.
        self._subscription_process = sp.Popen(
            ['bspc', 'subscribe'], stdout=sp.PIPE, encoding='UTF-8'
        )
        self.readables = [self._subscription_process.stdout]

        self._monitor = monitor

        # The different format strings use to display the status of the desktops
        self._formats = {
            'O': '%{{B' + Theme.YELLOW + '}} {} %{{B-}}', # Focused, Occupied
            'F': '%{{B' + Theme.YELLOW + '}} {} %{{B-}}', # Focused, Free
            'U': '%{{B' + Theme.YELLOW + '}} {} %{{B-}}', # Focused, Urgent

            'o': '%{{B' + Theme.BG + '}} {} %{{B-}}', # Unfocused, Occupied
            'f': '', # Unfocused, Free
            'u': '%{{B' + Theme.RED + '}} {} %{{B-}}', # Unfocused, Urgent
        }

    def _parse_event(self, event):
        """Parse a BSPWM event.

        Parameters:
            event (str): The BSPWM event.

        Returns:
            OrderedDict: Keys are desktop names, values are the status.
        """
        desktops = OrderedDict()

        event = event.lstrip('W')
        items = event.split(':')

        on_monitor = False

        for item in items:
            k, v = item[0], item[1:]

            if k in 'Mm':
                on_monitor = v == self._monitor
            elif on_monitor and k in 'OoFfUu':
                desktops[v] = k

        return desktops

    def output(self):
        event = self.readables[0].readline().strip()

        desktops = self._parse_event(event)

        output = []
        for desktop, state in desktops.items():
            output.append(self._formats[state].format(desktop))

        return ''.join(output)

# Define the modules to put on the bar (in order)
modules = (
    BSPWM("eDP1"),

    # Const("%{c}"),

    Const("%{r}"),

    Const("%{+u}"),
    Label("cpu "),
    CpuModule(),
    Const("%{-u}  "),

    # Const("%{+u}"),
    # Label("swap "),
    # MemoryUsage(MemoryUsage.SWAP),
    # Const("%{-u}  "),

    Const("%{+u}"),
    Label("ram "),
    MemoryUsage(MemoryUsage.RAM),
    Const("%{-u}  "),

    Const("%{+u}"),
    Label("bat "),
    File("/sys/class/power_supply/BAT0/capacity"),
    Const("%%{-u}  "),

    Const("%{+u}"),
    Label("vol "),
    Volume("Master"),
    Const("%{-u} "),

    Const("| "),
    Clock(),

    Const(" "),
)

# Lemonbar command
command = (
    'lemonbar',
    # '-b',
    '-a', '40',
    '-g', 'x25',
    '-B', Theme.BG,
    '-F', Theme.FG,
    '-U', Theme.BLUE,
    '-u', '2',
    '-f', 'JetBrains Mono Medium:pixelsize=14:antialias=true',
)

# Run the bar with the given modules
with Manager(command, modules) as mgr:
    mgr.loop()
