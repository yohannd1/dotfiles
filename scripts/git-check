#!/usr/bin/env bash

if [ $# != 0 ]; then
  printf >&2 "%s\n" "Usage: $(basename "$0")"
  exit 1
fi

is_git_dir() {
  [ -d .git ] || git rev-parse --git-dir 2>/dev/null >/dev/null
}

gitAddAll() {
  (cd "$(realpath -m "$(git rev-parse --git-dir)/..")" && git add -A)
}

confirm() {
  local answer
  printf >&2 "%s [Y/n] " "$1"
  read -r -n1 answer
  [ "$answer" != $'\n' ] && printf >&2 "\n"
  case "$answer" in
    y|Y|'') return 0 ;;
    n|N|*) return 1 ;;
  esac
}

if ! is_git_dir; then
  printf >&2 "This directory is not part of a git repository.\n"
  exit 1
fi

# show status
# git status -sb

# show help message
printf >&2 "Type 'h' for help.\n"

while [ ! "$exit" ]; do
  # prompt
  printf >&2 "Command => "
  read -r -n1 option
  printf >&2 "\n"

  # parse option
  case "$option" in
    b)
      git branch -a | cat
      printf "Current branch: %s\n" "$(git rev-parse --abbrev-ref HEAD)"
      ;;
    c) git commit ;;
    C) gitAddAll && git commit ;;
    d) git diff HEAD ;;
    f) git fetch ;;
    i) git status -sb ;;
    l) git log --all --oneline ;;
    L) git log --all ;;
    p) git pull ;;
    q) exit=0 ;;
    r) git remote -v ;;
    s) git push ;;
    S)
      current_branch=$(git branch --show-current) \
        && confirm "Command to be ran: git push -u origin $current_branch" \
        && git push -u origin "$current_branch"
      ;;
    "") clear ;;
    "") exit=0 ;;
    "") exit=0 ;;
    t) tig ;;
    h) cat >&2 <<EOF ;;
  i     info (git status -sb)
  a     stage all changes
  c     commit
  c     stage all changes and commit
  d     show diff
  p     pull
  s     push
  S     set upstream + push
  l     log (compact)
  L     log (full)
  f     fetch
  b     list branches
  r     list remotes
  q     exit
  ESC   exit
  h     show this message
  t     open tig
EOF
    *) printf 'Invalid option: %q\n' "$option" ;;
  esac
done

exit "$exit"
