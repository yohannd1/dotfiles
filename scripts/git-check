#!/usr/bin/env bash

if [ $# != 0 ]; then
  printf >&2 "%s\n" "Usage: $(basename "$0")"
  exit 1
fi

isGitDir() {
  [ -d .git ] || git rev-parse --git-dir 2>/dev/null >/dev/null
}

gitAddAll() {
  (cd "$(realpath -m "$(git rev-parse --git-dir)/..")" && git add -A)
}

confirm() {
  local answer
  printf >&2 "%s [Y/n] " "$1"
  read -r -n1 answer
  [ "$answer" != $'\n' ] && printf >&2 "\n"
  case "$answer" in
    y|Y|'') return 0 ;;
    n|N|*) return 1 ;;
  esac
}

if ! isGitDir; then
  printf >&2 "Error: the current directory is not part of a git repository.\n"
  printf >&2 "You are at: %s\n" "$PWD"
  exit 1
fi

# show help message
printf >&2 "Type 'h' for help.\n"

while [ ! "$exit" ]; do
  # prompt
  printf >&2 "Command => "
  read -r -n1 option
  printf >&2 "\n"

  # parse option
  case "$option" in
    a)
      git status -u --short \
        | awk '($1 != "A") { print }' \
        | cut -d' ' -f2- \
        | fzagnostic -m \
        | cut -d' ' -f2- \
        | xargs -I{} git add {}
      ;;
    A)
      git status -u --short \
        | awk '($1 == "A") { print }' \
        | cut -d' ' -f2- \
        | fzagnostic -m \
        | cut -d' ' -f2- \
        | xargs -I{} git reset {}
      ;;
    b)
      git branch -a | cat
      printf "Current branch: %s\n" "$(git rev-parse --abbrev-ref HEAD)"
      ;;
    B)
      selectedBranch=$(
        git branch -la \
          | sed 's|^*||g' \
          | awk '{ print $1 }' \
          | fzagnostic) \
        && git checkout "$selectedBranch"
      ;;
    c|C) git commit ;;
    d) git diff HEAD ;;
    f) git fetch ;;
    i) git status -sb ;;
    l) git log --all --oneline ;;
    L) git log --all ;;
    p) git pull ;;
    q) exit=0 ;;
    r) git remote -v ;;
    s) git push ;;
    S)
      current_branch=$(git branch --show-current) \
        && confirm "Command to be ran: git push -u origin $current_branch" \
        && git push -u origin "$current_branch"
      ;;
    "") clear ;;
    "") exit=0 ;;
    "") exit=0 ;;
    t) tig status ;;
    h) cat >&2 <<EOF ;;
  a     select files to add (stage)
  A     select files to reset (unstage)
  b     list branches
  c, C  commit
  d     show diff
  f     fetch
  h     show this message
  i     info (git status -sb)
  l     log (compact)
  L     log (full)
  p     pull
  q     exit
  r     list remotes
  s     push
  S     set upstream + push
  t     open tig (tig status)
  ESC   exit
EOF
    *) printf 'Invalid option: %q\n' "$option" ;;
  esac
done

exit "$exit"
