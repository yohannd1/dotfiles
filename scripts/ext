#!/usr/bin/env sh

# A general extraction script that tries to guess how you want to extract it.
# Based off Luke Smith's one on https://github.com/lukesmithxyz/voidrice

PROGNAME=$(basename "$0")
EXT_DEFAULT_MODE=${EXT_DEFAULT_MODE:-auto}

shelp() {
  printf >&2 "Usage: %s\n\n" "$PROGNAME ARCHIVE [MODE]"
  printf >&2 "Possible values for MODE:\n"
  printf >&2 "  auto   (a) :: automatically detect if the archive should be extracted in a new directory or not (defaut).\n"
  printf >&2 "  here   (i) :: don't create a new directory, but rather extract into the current directory.\n"
  printf >&2 "  new    (n) :: create a new directory to extract there.\n"
  exit 1
}

isDirectoryEmpty() { [ -z "$(ls -A "$1")" ]; }

getBeforeSlash() { sed 's|^\([^/]\+/\).*$|\1|g'; }

shouldExtractHere() {
  read -r firstLine

  # TODO: handle ./ (should be equivalent to no prefix)
  # return false if there's at least one file on the root.
  printf "%s" "$firstLine" | grep -q '^[^/]\+/.*$' || return 1

  require=$(printf "%s" "$firstLine" | getBeforeSlash)

  while read -r line; do
    if printf "%s" "$line" | grep -qv '^'"$require"; then
      return 1
    fi
  done
}

setModeFromInput() { shouldExtractHere && echo here || echo new; }

main() {
  case "$archive" in
    # tar stuff
    *.tar.bz2|*.tbz2) tar -xvjf "$archive" ;;
    *.tar.xz|*.txz) tar -xvf "$archive" ;;
    *.tar.gz|*.tgz) tar -xvzf "$archive" ;;
    *.lzma) unlzma "$archive" ;;
    *.tar) tar -xvf "$archive" ;;
    *.bz2) bunzip2 "$archive" ;;
    *.gz) gunzip "$archive" ;;
    *.xz) unxz "$archive" ;;

    # encrypted tar archives
    *.tar.bz2.gpg|*.tbz2.gpg) gpg --decrypt "$archive" | tar -xvj ;;
    *.tar.xz.gpg|*.txz.gpg) gpg --decrypt "$archive" | tar -xv ;;
    *.tar.gz.gpg|*.tgz.gpg) gpg --decrypt "$archive" | tar -xvz ;;

    *.rar) unrar x -ad "$archive" ;;
    *.zip) unzip "$archive" ;;
    *.Z) uncompress "$archive" ;;
    *.7z) 7z x "$archive" ;;
    *.exe) cabextract "$archive" ;;

    *) printf >&2 "%s: unknown extension\n" "$PROGNAME"
       return 1
       ;;
  esac
}

case $# in
  0) shelp ;;
  1)
    archive="$1"
    mode=${EXT_DEFAULT_MODE}
    ;;
  2)
    archive="$1"
    mode="$2"
    ;;
  *)
    printf >&2 "%s: invalid amount of arguments\n" "$PROGNAME"
    shelp
    ;;
esac

if [ -z "$archive" ]; then
  printf >&2 "%s: empty ARCHIVE argument\n" "$PROGNAME"
  shelp
fi

archive=$(realpath "$archive") || exit 1

# oldArchive="$archive"
# archive=$(readlink -f "$archive") # follow archive link, if any

# if [ "$archive" != "$oldArchive" ]; then
#   printf >&2 "%s: following symlink: %s -> %s\n" "$PROGNAME" "$oldArchive" "$archive"
# fi

if [ ! -f "$archive" ]; then
  printf >&2 '%s: archive "%s" not found\n' "$PROGNAME" "$archive"
  exit 1
fi

if [ "${archive#*.}" = "$archive" ]; then
  printf >&2 "%s: archive has no extension and therefore can't be extracted.\n" "$PROGNAME"
  exit 1
fi

printf >&2 "%s: analyzing file contents...\n" "$PROGNAME"

getMode() {
  case "$archive" in
    *.gpg) printf >&2 "%s: contents of archive cannot be looked up before decryption; MODE will default to 'new'\n" "$PROGNAME"
      printf "new"
      ;;

    # FIXME: there apparently is a considerable slowdown on listing tar files... i think it reads the entire file. so I might abandon this for them and just assume the safest.
    *.tar|*.tar.bz2|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz) tar -tf "$archive" | setModeFromInput ;;
    *.zip|*.7z) bsdtar --list --file "$archive" | setModeFromInput ;;

    *) printf >&2 "%s: unknown listing method for extension; using default MODE 'new'\n" "$PROGNAME"
      printf "new"
      ;;
  esac
}

if [ "$mode" = auto ]; then
  mode=$(getMode)
fi

printf >&2 "%s: current mode: %s\n" "$PROGNAME" "$mode"
printf >&2 "%s: commencing extraction...\n" "$PROGNAME"

case "$mode" in
  new)
    directory="${archive%%.*}" ## remove extension
    if [ -d "$directory" ]; then
      # TODO: be able to somehow specify the extraction directory
      printf >&2 "%s: directory '%s' already exists\n" "$PROGNAME" "$directory"
      exit 1
    fi

    mkdir -p "$directory"
    (cd "$directory" && main) || {
      isDirectoryEmpty "$directory" && rm -r "$directory"
      exit 1
    }
    ;;
  here) main || exit 1 ;;
  *)
    printf >&2 "%s: invalid MODE: %s\n" "$PROGNAME" "$mode"
    shelp
    ;;
esac
